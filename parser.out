Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIO
    CTELETRA
    FALSE
    TRUE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA puntos_semantica_1 ID puntos_semantica_2 programaB programaC inicio
Rule 2     programaB -> dec_vars
Rule 3     programaB -> empty
Rule 4     programaC -> dec_func programaCC
Rule 5     programaCC -> programaC
Rule 6     programaCC -> empty
Rule 7     dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
Rule 8     dec_varsI -> ID punto_semantico_4 dec_varsII
Rule 9     dec_varsII -> COMMA ID punto_semantico_4
Rule 10    dec_varsII -> empty
Rule 11    dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE
Rule 12    dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE
Rule 13    dec_varsB -> empty
Rule 14    dec_varsBB -> dec_vars
Rule 15    dec_varsBB -> empty
Rule 16    tipo -> TIPOENT
Rule 17    tipo -> TIPODEC
Rule 18    tipo -> TIPOLETRA
Rule 19    tipo -> TIPOLOGI
Rule 20    dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14
Rule 21    dec_funcB -> dec_params
Rule 22    dec_funcB -> empty
Rule 23    dec_params -> ID punto_semantico_11 COLON tipo punto_semantico_5 punto_semantico_12 dec_paramsB
Rule 24    dec_paramsB -> COMMA dec_params
Rule 25    dec_paramsB -> empty
Rule 26    tipo_func -> tipo
Rule 27    tipo_func -> VOID
Rule 28    bloque -> bloqueB bloqueBB
Rule 29    bloqueB -> asignacion
Rule 30    bloqueB -> ciclo_para_cada
Rule 31    bloqueB -> ciclo_mientras
Rule 32    bloqueB -> condicion
Rule 33    bloqueB -> escribir
Rule 34    bloqueB -> leer
Rule 35    bloqueB -> dec_vars
Rule 36    bloqueB -> llam_func
Rule 37    bloqueB -> regresar
Rule 38    bloqueBB -> bloqueB bloqueBB
Rule 39    bloqueBB -> empty
Rule 40    asignacion -> llam_vars ASSIGN expresion
Rule 41    llam_vars -> ID llam_varsB
Rule 42    llam_varsB -> LBRACE CTEENT RBRACE
Rule 43    llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE
Rule 44    llam_varsB -> empty
Rule 45    expresion -> peta_exp expresionB
Rule 46    expresionB -> ASSIGN expresion
Rule 47    expresionB -> empty
Rule 48    peta_exp -> tera_exp peta_expB
Rule 49    peta_expB -> AND peta_exp
Rule 50    peta_expB -> OR peta_exp
Rule 51    peta_expB -> empty
Rule 52    tera_exp -> mega_exp tera_expB
Rule 53    tera_expB -> LT tera_exp
Rule 54    tera_expB -> GT tera_exp
Rule 55    tera_expB -> LTE tera_exp
Rule 56    tera_expB -> GTE tera_exp
Rule 57    tera_expB -> EQUAL tera_exp
Rule 58    tera_expB -> NEQUAL tera_exp
Rule 59    tera_expB -> empty
Rule 60    mega_exp -> kilo_exp mega_expB
Rule 61    mega_expB -> PLUS mega_exp
Rule 62    mega_expB -> MINUS mega_exp
Rule 63    mega_expB -> empty
Rule 64    kilo_exp -> factor kilo_expB
Rule 65    kilo_expB -> TIMES kilo_exp
Rule 66    kilo_expB -> DIVIDE kilo_exp
Rule 67    kilo_expB -> empty
Rule 68    factor -> LPAREN expresion RPAREN
Rule 69    factor -> llam_vars
Rule 70    factor -> llam_func
Rule 71    factor -> CTEENT
Rule 72    factor -> CTEDECI
Rule 73    llam_func -> ID LPAREN llam_params RPAREN
Rule 74    llam_params -> expresion llam_paramsB
Rule 75    llam_paramsB -> COMMA llam_params
Rule 76    llam_paramsB -> empty
Rule 77    ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
Rule 78    ciclo_para_cadaB -> CONFORME expresion
Rule 79    ciclo_para_cadaB -> empty
Rule 80    ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
Rule 81    condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
Rule 82    condicionB -> ELSE LCURLY bloque RCURLY
Rule 83    condicionB -> empty
Rule 84    escribir -> ESCRITURA LPAREN escribirB RPAREN
Rule 85    escribirB -> expresion escribirBB
Rule 86    escribirB -> CTEFRASE escribirBB
Rule 87    escribirBB -> COMMA escribirB
Rule 88    escribirBB -> empty
Rule 89    leer -> LECTURA LPAREN leerI RPAREN
Rule 90    leerI -> ID leerII
Rule 91    leerII -> COMMA ID
Rule 92    leerII -> empty
Rule 93    regresar -> RETURN LPAREN expresion RPAREN
Rule 94    inicio -> MAIN puntos_semantica_15 LPAREN RPAREN LCURLY bloque RCURLY punto_semantico_14
Rule 95    empty -> <empty>
Rule 96    puntos_semantica_1 -> <empty>
Rule 97    puntos_semantica_2 -> <empty>
Rule 98    punto_semantico_3 -> <empty>
Rule 99    punto_semantico_4 -> <empty>
Rule 100   punto_semantico_5 -> <empty>
Rule 101   punto_semantico_6 -> <empty>
Rule 102   punto_semantico_7 -> <empty>
Rule 103   punto_semantico_8 -> <empty>
Rule 104   punto_semantico_9 -> <empty>
Rule 105   punto_semantico_10 -> <empty>
Rule 106   punto_semantico_11 -> <empty>
Rule 107   punto_semantico_12 -> <empty>
Rule 108   punto_semantico_13 -> <empty>
Rule 109   punto_semantico_14 -> <empty>
Rule 110   puntos_semantica_15 -> <empty>

Terminals, with rules where they appear

AND                  : 49
ASSIGN               : 40 46
COLON                : 7 20 23
COMENTARIO           : 
COMMA                : 9 24 75 87 91
CONFORME             : 78
CTEDECI              : 72
CTEENT               : 11 12 12 42 43 43 71
CTEFRASE             : 86
CTELETRA             : 
DIVIDE               : 66
ELSE                 : 82
EQUAL                : 57
ESCRITURA            : 84
FALSE                : 
FOR                  : 77
FUNCION              : 20
GT                   : 54
GTE                  : 56
ID                   : 1 8 9 20 23 41 73 77 77 90 91
IF                   : 81
IN                   : 77
LBRACE               : 11 12 12 42 43 43
LCURLY               : 20 77 80 81 82 94
LECTURA              : 89
LPAREN               : 20 68 73 77 80 81 84 89 93 94
LT                   : 53
LTE                  : 55
MAIN                 : 94
MINUS                : 62
NEQUAL               : 58
OR                   : 50
PLUS                 : 61
PROGRAMA             : 1
RBRACE               : 11 12 12 42 43 43
RCURLY               : 20 77 80 81 82 94
RETURN               : 93
RPAREN               : 20 68 73 77 80 81 84 89 93 94
TIMES                : 65
TIPODEC              : 17
TIPOENT              : 16
TIPOLETRA            : 18
TIPOLOGI             : 19
TRUE                 : 
VAR                  : 7
VOID                 : 27
WHILE                : 80
error                : 

Nonterminals, with rules where they appear

asignacion           : 29
bloque               : 20 77 80 81 82 94
bloqueB              : 28 38
bloqueBB             : 28 38
ciclo_mientras       : 31
ciclo_para_cada      : 30
ciclo_para_cadaB     : 77
condicion            : 32
condicionB           : 81
dec_func             : 4
dec_funcB            : 20
dec_params           : 21 24
dec_paramsB          : 23
dec_vars             : 2 14 35
dec_varsB            : 7
dec_varsBB           : 7
dec_varsI            : 7
dec_varsII           : 8
empty                : 3 6 10 13 15 22 25 39 44 47 51 59 63 67 76 79 83 88 92
escribir             : 33
escribirB            : 84 87
escribirBB           : 85 86
expresion            : 40 46 68 74 78 80 81 85 93
expresionB           : 45
factor               : 64
inicio               : 1
kilo_exp             : 60 65 66
kilo_expB            : 64
leer                 : 34
leerI                : 89
leerII               : 90
llam_func            : 36 70
llam_params          : 73 75
llam_paramsB         : 74
llam_vars            : 40 69
llam_varsB           : 41
mega_exp             : 52 61 62
mega_expB            : 60
peta_exp             : 45 49 50
peta_expB            : 48
programa             : 0
programaB            : 1
programaC            : 1 5
programaCC           : 4
punto_semantico_10   : 20
punto_semantico_11   : 23
punto_semantico_12   : 23
punto_semantico_13   : 20
punto_semantico_14   : 20 94
punto_semantico_3    : 7 20
punto_semantico_4    : 8 9
punto_semantico_5    : 7 23
punto_semantico_6    : 11 12
punto_semantico_7    : 12
punto_semantico_8    : 7
punto_semantico_9    : 20
puntos_semantica_1   : 1
puntos_semantica_15  : 94
puntos_semantica_2   : 1
regresar             : 37
tera_exp             : 48 53 54 55 56 57 58
tera_expB            : 52
tipo                 : 7 23 26
tipo_func            : 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA puntos_semantica_1 ID puntos_semantica_2 programaB programaC inicio

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . puntos_semantica_1 ID puntos_semantica_2 programaB programaC inicio
    (96) puntos_semantica_1 -> .

    ID              reduce using rule 96 (puntos_semantica_1 -> .)

    puntos_semantica_1             shift and go to state 3

state 3

    (1) programa -> PROGRAMA puntos_semantica_1 . ID puntos_semantica_2 programaB programaC inicio

    ID              shift and go to state 4


state 4

    (1) programa -> PROGRAMA puntos_semantica_1 ID . puntos_semantica_2 programaB programaC inicio
    (97) puntos_semantica_2 -> .

    VAR             reduce using rule 97 (puntos_semantica_2 -> .)
    FUNCION         reduce using rule 97 (puntos_semantica_2 -> .)

    puntos_semantica_2             shift and go to state 5

state 5

    (1) programa -> PROGRAMA puntos_semantica_1 ID puntos_semantica_2 . programaB programaC inicio
    (2) programaB -> . dec_vars
    (3) programaB -> . empty
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (95) empty -> .

    VAR             shift and go to state 9
    FUNCION         reduce using rule 95 (empty -> .)

    programaB                      shift and go to state 6
    dec_vars                       shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) programa -> PROGRAMA puntos_semantica_1 ID puntos_semantica_2 programaB . programaC inicio
    (4) programaC -> . dec_func programaCC
    (20) dec_func -> . FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14

    FUNCION         shift and go to state 12

    programaC                      shift and go to state 10
    dec_func                       shift and go to state 11

state 7

    (2) programaB -> dec_vars .

    FUNCION         reduce using rule 2 (programaB -> dec_vars .)


state 8

    (3) programaB -> empty .

    FUNCION         reduce using rule 3 (programaB -> empty .)


state 9

    (7) dec_vars -> VAR . punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (98) punto_semantico_3 -> .

    ID              reduce using rule 98 (punto_semantico_3 -> .)

    punto_semantico_3              shift and go to state 13

state 10

    (1) programa -> PROGRAMA puntos_semantica_1 ID puntos_semantica_2 programaB programaC . inicio
    (94) inicio -> . MAIN puntos_semantica_15 LPAREN RPAREN LCURLY bloque RCURLY punto_semantico_14

    MAIN            shift and go to state 15

    inicio                         shift and go to state 14

state 11

    (4) programaC -> dec_func . programaCC
    (5) programaCC -> . programaC
    (6) programaCC -> . empty
    (4) programaC -> . dec_func programaCC
    (95) empty -> .
    (20) dec_func -> . FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14

    MAIN            reduce using rule 95 (empty -> .)
    FUNCION         shift and go to state 12

    dec_func                       shift and go to state 11
    programaCC                     shift and go to state 16
    programaC                      shift and go to state 17
    empty                          shift and go to state 18

state 12

    (20) dec_func -> FUNCION . punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14
    (104) punto_semantico_9 -> .

    ID              reduce using rule 104 (punto_semantico_9 -> .)

    punto_semantico_9              shift and go to state 19

state 13

    (7) dec_vars -> VAR punto_semantico_3 . dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (8) dec_varsI -> . ID punto_semantico_4 dec_varsII

    ID              shift and go to state 21

    dec_varsI                      shift and go to state 20

state 14

    (1) programa -> PROGRAMA puntos_semantica_1 ID puntos_semantica_2 programaB programaC inicio .

    $end            reduce using rule 1 (programa -> PROGRAMA puntos_semantica_1 ID puntos_semantica_2 programaB programaC inicio .)


state 15

    (94) inicio -> MAIN . puntos_semantica_15 LPAREN RPAREN LCURLY bloque RCURLY punto_semantico_14
    (110) puntos_semantica_15 -> .

    LPAREN          reduce using rule 110 (puntos_semantica_15 -> .)

    puntos_semantica_15            shift and go to state 22

state 16

    (4) programaC -> dec_func programaCC .

    MAIN            reduce using rule 4 (programaC -> dec_func programaCC .)


state 17

    (5) programaCC -> programaC .

    MAIN            reduce using rule 5 (programaCC -> programaC .)


state 18

    (6) programaCC -> empty .

    MAIN            reduce using rule 6 (programaCC -> empty .)


state 19

    (20) dec_func -> FUNCION punto_semantico_9 . ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14

    ID              shift and go to state 23


state 20

    (7) dec_vars -> VAR punto_semantico_3 dec_varsI . COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB

    COLON           shift and go to state 24


state 21

    (8) dec_varsI -> ID . punto_semantico_4 dec_varsII
    (99) punto_semantico_4 -> .

    COMMA           reduce using rule 99 (punto_semantico_4 -> .)
    COLON           reduce using rule 99 (punto_semantico_4 -> .)

    punto_semantico_4              shift and go to state 25

state 22

    (94) inicio -> MAIN puntos_semantica_15 . LPAREN RPAREN LCURLY bloque RCURLY punto_semantico_14

    LPAREN          shift and go to state 26


state 23

    (20) dec_func -> FUNCION punto_semantico_9 ID . punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14
    (105) punto_semantico_10 -> .

    LPAREN          reduce using rule 105 (punto_semantico_10 -> .)

    punto_semantico_10             shift and go to state 27

state 24

    (7) dec_vars -> VAR punto_semantico_3 dec_varsI COLON . tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (16) tipo -> . TIPOENT
    (17) tipo -> . TIPODEC
    (18) tipo -> . TIPOLETRA
    (19) tipo -> . TIPOLOGI

    TIPOENT         shift and go to state 29
    TIPODEC         shift and go to state 30
    TIPOLETRA       shift and go to state 31
    TIPOLOGI        shift and go to state 32

    tipo                           shift and go to state 28

state 25

    (8) dec_varsI -> ID punto_semantico_4 . dec_varsII
    (9) dec_varsII -> . COMMA ID punto_semantico_4
    (10) dec_varsII -> . empty
    (95) empty -> .

    COMMA           shift and go to state 34
    COLON           reduce using rule 95 (empty -> .)

    dec_varsII                     shift and go to state 33
    empty                          shift and go to state 35

state 26

    (94) inicio -> MAIN puntos_semantica_15 LPAREN . RPAREN LCURLY bloque RCURLY punto_semantico_14

    RPAREN          shift and go to state 36


state 27

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 . LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14

    LPAREN          shift and go to state 37


state 28

    (7) dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo . punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (100) punto_semantico_5 -> .

    LBRACE          reduce using rule 100 (punto_semantico_5 -> .)
    VAR             reduce using rule 100 (punto_semantico_5 -> .)
    FUNCION         reduce using rule 100 (punto_semantico_5 -> .)
    FOR             reduce using rule 100 (punto_semantico_5 -> .)
    WHILE           reduce using rule 100 (punto_semantico_5 -> .)
    IF              reduce using rule 100 (punto_semantico_5 -> .)
    ESCRITURA       reduce using rule 100 (punto_semantico_5 -> .)
    LECTURA         reduce using rule 100 (punto_semantico_5 -> .)
    ID              reduce using rule 100 (punto_semantico_5 -> .)
    RETURN          reduce using rule 100 (punto_semantico_5 -> .)
    RCURLY          reduce using rule 100 (punto_semantico_5 -> .)

    punto_semantico_5              shift and go to state 38

state 29

    (16) tipo -> TIPOENT .

    LBRACE          reduce using rule 16 (tipo -> TIPOENT .)
    VAR             reduce using rule 16 (tipo -> TIPOENT .)
    FUNCION         reduce using rule 16 (tipo -> TIPOENT .)
    FOR             reduce using rule 16 (tipo -> TIPOENT .)
    WHILE           reduce using rule 16 (tipo -> TIPOENT .)
    IF              reduce using rule 16 (tipo -> TIPOENT .)
    ESCRITURA       reduce using rule 16 (tipo -> TIPOENT .)
    LECTURA         reduce using rule 16 (tipo -> TIPOENT .)
    ID              reduce using rule 16 (tipo -> TIPOENT .)
    RETURN          reduce using rule 16 (tipo -> TIPOENT .)
    RCURLY          reduce using rule 16 (tipo -> TIPOENT .)
    COMMA           reduce using rule 16 (tipo -> TIPOENT .)
    RPAREN          reduce using rule 16 (tipo -> TIPOENT .)
    LCURLY          reduce using rule 16 (tipo -> TIPOENT .)


state 30

    (17) tipo -> TIPODEC .

    LBRACE          reduce using rule 17 (tipo -> TIPODEC .)
    VAR             reduce using rule 17 (tipo -> TIPODEC .)
    FUNCION         reduce using rule 17 (tipo -> TIPODEC .)
    FOR             reduce using rule 17 (tipo -> TIPODEC .)
    WHILE           reduce using rule 17 (tipo -> TIPODEC .)
    IF              reduce using rule 17 (tipo -> TIPODEC .)
    ESCRITURA       reduce using rule 17 (tipo -> TIPODEC .)
    LECTURA         reduce using rule 17 (tipo -> TIPODEC .)
    ID              reduce using rule 17 (tipo -> TIPODEC .)
    RETURN          reduce using rule 17 (tipo -> TIPODEC .)
    RCURLY          reduce using rule 17 (tipo -> TIPODEC .)
    COMMA           reduce using rule 17 (tipo -> TIPODEC .)
    RPAREN          reduce using rule 17 (tipo -> TIPODEC .)
    LCURLY          reduce using rule 17 (tipo -> TIPODEC .)


state 31

    (18) tipo -> TIPOLETRA .

    LBRACE          reduce using rule 18 (tipo -> TIPOLETRA .)
    VAR             reduce using rule 18 (tipo -> TIPOLETRA .)
    FUNCION         reduce using rule 18 (tipo -> TIPOLETRA .)
    FOR             reduce using rule 18 (tipo -> TIPOLETRA .)
    WHILE           reduce using rule 18 (tipo -> TIPOLETRA .)
    IF              reduce using rule 18 (tipo -> TIPOLETRA .)
    ESCRITURA       reduce using rule 18 (tipo -> TIPOLETRA .)
    LECTURA         reduce using rule 18 (tipo -> TIPOLETRA .)
    ID              reduce using rule 18 (tipo -> TIPOLETRA .)
    RETURN          reduce using rule 18 (tipo -> TIPOLETRA .)
    RCURLY          reduce using rule 18 (tipo -> TIPOLETRA .)
    COMMA           reduce using rule 18 (tipo -> TIPOLETRA .)
    RPAREN          reduce using rule 18 (tipo -> TIPOLETRA .)
    LCURLY          reduce using rule 18 (tipo -> TIPOLETRA .)


state 32

    (19) tipo -> TIPOLOGI .

    LBRACE          reduce using rule 19 (tipo -> TIPOLOGI .)
    VAR             reduce using rule 19 (tipo -> TIPOLOGI .)
    FUNCION         reduce using rule 19 (tipo -> TIPOLOGI .)
    FOR             reduce using rule 19 (tipo -> TIPOLOGI .)
    WHILE           reduce using rule 19 (tipo -> TIPOLOGI .)
    IF              reduce using rule 19 (tipo -> TIPOLOGI .)
    ESCRITURA       reduce using rule 19 (tipo -> TIPOLOGI .)
    LECTURA         reduce using rule 19 (tipo -> TIPOLOGI .)
    ID              reduce using rule 19 (tipo -> TIPOLOGI .)
    RETURN          reduce using rule 19 (tipo -> TIPOLOGI .)
    RCURLY          reduce using rule 19 (tipo -> TIPOLOGI .)
    COMMA           reduce using rule 19 (tipo -> TIPOLOGI .)
    RPAREN          reduce using rule 19 (tipo -> TIPOLOGI .)
    LCURLY          reduce using rule 19 (tipo -> TIPOLOGI .)


state 33

    (8) dec_varsI -> ID punto_semantico_4 dec_varsII .

    COLON           reduce using rule 8 (dec_varsI -> ID punto_semantico_4 dec_varsII .)


state 34

    (9) dec_varsII -> COMMA . ID punto_semantico_4

    ID              shift and go to state 39


state 35

    (10) dec_varsII -> empty .

    COLON           reduce using rule 10 (dec_varsII -> empty .)


state 36

    (94) inicio -> MAIN puntos_semantica_15 LPAREN RPAREN . LCURLY bloque RCURLY punto_semantico_14

    LCURLY          shift and go to state 40


state 37

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN . punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14
    (98) punto_semantico_3 -> .

    ID              reduce using rule 98 (punto_semantico_3 -> .)
    RPAREN          reduce using rule 98 (punto_semantico_3 -> .)

    punto_semantico_3              shift and go to state 41

state 38

    (7) dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 . dec_varsB punto_semantico_8 dec_varsBB
    (11) dec_varsB -> . LBRACE CTEENT punto_semantico_6 RBRACE
    (12) dec_varsB -> . LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE
    (13) dec_varsB -> . empty
    (95) empty -> .

    LBRACE          shift and go to state 43
    VAR             reduce using rule 95 (empty -> .)
    FUNCION         reduce using rule 95 (empty -> .)
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)

    dec_varsB                      shift and go to state 42
    empty                          shift and go to state 44

state 39

    (9) dec_varsII -> COMMA ID . punto_semantico_4
    (99) punto_semantico_4 -> .

    COLON           reduce using rule 99 (punto_semantico_4 -> .)

    punto_semantico_4              shift and go to state 45

state 40

    (94) inicio -> MAIN puntos_semantica_15 LPAREN RPAREN LCURLY . bloque RCURLY punto_semantico_14
    (28) bloque -> . bloqueB bloqueBB
    (29) bloqueB -> . asignacion
    (30) bloqueB -> . ciclo_para_cada
    (31) bloqueB -> . ciclo_mientras
    (32) bloqueB -> . condicion
    (33) bloqueB -> . escribir
    (34) bloqueB -> . leer
    (35) bloqueB -> . dec_vars
    (36) bloqueB -> . llam_func
    (37) bloqueB -> . regresar
    (40) asignacion -> . llam_vars ASSIGN expresion
    (77) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (80) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (81) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (84) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (89) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (73) llam_func -> . ID LPAREN llam_params RPAREN
    (93) regresar -> . RETURN LPAREN expresion RPAREN
    (41) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 58
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    ESCRITURA       shift and go to state 62
    LECTURA         shift and go to state 63
    VAR             shift and go to state 9
    ID              shift and go to state 59
    RETURN          shift and go to state 64

    bloque                         shift and go to state 46
    bloqueB                        shift and go to state 47
    asignacion                     shift and go to state 48
    ciclo_para_cada                shift and go to state 49
    ciclo_mientras                 shift and go to state 50
    condicion                      shift and go to state 51
    escribir                       shift and go to state 52
    leer                           shift and go to state 53
    dec_vars                       shift and go to state 54
    llam_func                      shift and go to state 55
    regresar                       shift and go to state 56
    llam_vars                      shift and go to state 57

state 41

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 . dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14
    (21) dec_funcB -> . dec_params
    (22) dec_funcB -> . empty
    (23) dec_params -> . ID punto_semantico_11 COLON tipo punto_semantico_5 punto_semantico_12 dec_paramsB
    (95) empty -> .

    ID              shift and go to state 65
    RPAREN          reduce using rule 95 (empty -> .)

    dec_funcB                      shift and go to state 66
    dec_params                     shift and go to state 67
    empty                          shift and go to state 68

state 42

    (7) dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB . punto_semantico_8 dec_varsBB
    (103) punto_semantico_8 -> .

    VAR             reduce using rule 103 (punto_semantico_8 -> .)
    FUNCION         reduce using rule 103 (punto_semantico_8 -> .)
    FOR             reduce using rule 103 (punto_semantico_8 -> .)
    WHILE           reduce using rule 103 (punto_semantico_8 -> .)
    IF              reduce using rule 103 (punto_semantico_8 -> .)
    ESCRITURA       reduce using rule 103 (punto_semantico_8 -> .)
    LECTURA         reduce using rule 103 (punto_semantico_8 -> .)
    ID              reduce using rule 103 (punto_semantico_8 -> .)
    RETURN          reduce using rule 103 (punto_semantico_8 -> .)
    RCURLY          reduce using rule 103 (punto_semantico_8 -> .)

    punto_semantico_8              shift and go to state 69

state 43

    (11) dec_varsB -> LBRACE . CTEENT punto_semantico_6 RBRACE
    (12) dec_varsB -> LBRACE . CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE

    CTEENT          shift and go to state 70


state 44

    (13) dec_varsB -> empty .

    VAR             reduce using rule 13 (dec_varsB -> empty .)
    FUNCION         reduce using rule 13 (dec_varsB -> empty .)
    FOR             reduce using rule 13 (dec_varsB -> empty .)
    WHILE           reduce using rule 13 (dec_varsB -> empty .)
    IF              reduce using rule 13 (dec_varsB -> empty .)
    ESCRITURA       reduce using rule 13 (dec_varsB -> empty .)
    LECTURA         reduce using rule 13 (dec_varsB -> empty .)
    ID              reduce using rule 13 (dec_varsB -> empty .)
    RETURN          reduce using rule 13 (dec_varsB -> empty .)
    RCURLY          reduce using rule 13 (dec_varsB -> empty .)


state 45

    (9) dec_varsII -> COMMA ID punto_semantico_4 .

    COLON           reduce using rule 9 (dec_varsII -> COMMA ID punto_semantico_4 .)


state 46

    (94) inicio -> MAIN puntos_semantica_15 LPAREN RPAREN LCURLY bloque . RCURLY punto_semantico_14

    RCURLY          shift and go to state 71


state 47

    (28) bloque -> bloqueB . bloqueBB
    (38) bloqueBB -> . bloqueB bloqueBB
    (39) bloqueBB -> . empty
    (29) bloqueB -> . asignacion
    (30) bloqueB -> . ciclo_para_cada
    (31) bloqueB -> . ciclo_mientras
    (32) bloqueB -> . condicion
    (33) bloqueB -> . escribir
    (34) bloqueB -> . leer
    (35) bloqueB -> . dec_vars
    (36) bloqueB -> . llam_func
    (37) bloqueB -> . regresar
    (95) empty -> .
    (40) asignacion -> . llam_vars ASSIGN expresion
    (77) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (80) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (81) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (84) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (89) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (73) llam_func -> . ID LPAREN llam_params RPAREN
    (93) regresar -> . RETURN LPAREN expresion RPAREN
    (41) llam_vars -> . ID llam_varsB

    RCURLY          reduce using rule 95 (empty -> .)
    FOR             shift and go to state 58
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    ESCRITURA       shift and go to state 62
    LECTURA         shift and go to state 63
    VAR             shift and go to state 9
    ID              shift and go to state 59
    RETURN          shift and go to state 64

    bloqueB                        shift and go to state 72
    bloqueBB                       shift and go to state 73
    empty                          shift and go to state 74
    asignacion                     shift and go to state 48
    ciclo_para_cada                shift and go to state 49
    ciclo_mientras                 shift and go to state 50
    condicion                      shift and go to state 51
    escribir                       shift and go to state 52
    leer                           shift and go to state 53
    dec_vars                       shift and go to state 54
    llam_func                      shift and go to state 55
    regresar                       shift and go to state 56
    llam_vars                      shift and go to state 57

state 48

    (29) bloqueB -> asignacion .

    FOR             reduce using rule 29 (bloqueB -> asignacion .)
    WHILE           reduce using rule 29 (bloqueB -> asignacion .)
    IF              reduce using rule 29 (bloqueB -> asignacion .)
    ESCRITURA       reduce using rule 29 (bloqueB -> asignacion .)
    LECTURA         reduce using rule 29 (bloqueB -> asignacion .)
    VAR             reduce using rule 29 (bloqueB -> asignacion .)
    ID              reduce using rule 29 (bloqueB -> asignacion .)
    RETURN          reduce using rule 29 (bloqueB -> asignacion .)
    RCURLY          reduce using rule 29 (bloqueB -> asignacion .)


state 49

    (30) bloqueB -> ciclo_para_cada .

    FOR             reduce using rule 30 (bloqueB -> ciclo_para_cada .)
    WHILE           reduce using rule 30 (bloqueB -> ciclo_para_cada .)
    IF              reduce using rule 30 (bloqueB -> ciclo_para_cada .)
    ESCRITURA       reduce using rule 30 (bloqueB -> ciclo_para_cada .)
    LECTURA         reduce using rule 30 (bloqueB -> ciclo_para_cada .)
    VAR             reduce using rule 30 (bloqueB -> ciclo_para_cada .)
    ID              reduce using rule 30 (bloqueB -> ciclo_para_cada .)
    RETURN          reduce using rule 30 (bloqueB -> ciclo_para_cada .)
    RCURLY          reduce using rule 30 (bloqueB -> ciclo_para_cada .)


state 50

    (31) bloqueB -> ciclo_mientras .

    FOR             reduce using rule 31 (bloqueB -> ciclo_mientras .)
    WHILE           reduce using rule 31 (bloqueB -> ciclo_mientras .)
    IF              reduce using rule 31 (bloqueB -> ciclo_mientras .)
    ESCRITURA       reduce using rule 31 (bloqueB -> ciclo_mientras .)
    LECTURA         reduce using rule 31 (bloqueB -> ciclo_mientras .)
    VAR             reduce using rule 31 (bloqueB -> ciclo_mientras .)
    ID              reduce using rule 31 (bloqueB -> ciclo_mientras .)
    RETURN          reduce using rule 31 (bloqueB -> ciclo_mientras .)
    RCURLY          reduce using rule 31 (bloqueB -> ciclo_mientras .)


state 51

    (32) bloqueB -> condicion .

    FOR             reduce using rule 32 (bloqueB -> condicion .)
    WHILE           reduce using rule 32 (bloqueB -> condicion .)
    IF              reduce using rule 32 (bloqueB -> condicion .)
    ESCRITURA       reduce using rule 32 (bloqueB -> condicion .)
    LECTURA         reduce using rule 32 (bloqueB -> condicion .)
    VAR             reduce using rule 32 (bloqueB -> condicion .)
    ID              reduce using rule 32 (bloqueB -> condicion .)
    RETURN          reduce using rule 32 (bloqueB -> condicion .)
    RCURLY          reduce using rule 32 (bloqueB -> condicion .)


state 52

    (33) bloqueB -> escribir .

    FOR             reduce using rule 33 (bloqueB -> escribir .)
    WHILE           reduce using rule 33 (bloqueB -> escribir .)
    IF              reduce using rule 33 (bloqueB -> escribir .)
    ESCRITURA       reduce using rule 33 (bloqueB -> escribir .)
    LECTURA         reduce using rule 33 (bloqueB -> escribir .)
    VAR             reduce using rule 33 (bloqueB -> escribir .)
    ID              reduce using rule 33 (bloqueB -> escribir .)
    RETURN          reduce using rule 33 (bloqueB -> escribir .)
    RCURLY          reduce using rule 33 (bloqueB -> escribir .)


state 53

    (34) bloqueB -> leer .

    FOR             reduce using rule 34 (bloqueB -> leer .)
    WHILE           reduce using rule 34 (bloqueB -> leer .)
    IF              reduce using rule 34 (bloqueB -> leer .)
    ESCRITURA       reduce using rule 34 (bloqueB -> leer .)
    LECTURA         reduce using rule 34 (bloqueB -> leer .)
    VAR             reduce using rule 34 (bloqueB -> leer .)
    ID              reduce using rule 34 (bloqueB -> leer .)
    RETURN          reduce using rule 34 (bloqueB -> leer .)
    RCURLY          reduce using rule 34 (bloqueB -> leer .)


state 54

    (35) bloqueB -> dec_vars .

    FOR             reduce using rule 35 (bloqueB -> dec_vars .)
    WHILE           reduce using rule 35 (bloqueB -> dec_vars .)
    IF              reduce using rule 35 (bloqueB -> dec_vars .)
    ESCRITURA       reduce using rule 35 (bloqueB -> dec_vars .)
    LECTURA         reduce using rule 35 (bloqueB -> dec_vars .)
    VAR             reduce using rule 35 (bloqueB -> dec_vars .)
    ID              reduce using rule 35 (bloqueB -> dec_vars .)
    RETURN          reduce using rule 35 (bloqueB -> dec_vars .)
    RCURLY          reduce using rule 35 (bloqueB -> dec_vars .)


state 55

    (36) bloqueB -> llam_func .

    FOR             reduce using rule 36 (bloqueB -> llam_func .)
    WHILE           reduce using rule 36 (bloqueB -> llam_func .)
    IF              reduce using rule 36 (bloqueB -> llam_func .)
    ESCRITURA       reduce using rule 36 (bloqueB -> llam_func .)
    LECTURA         reduce using rule 36 (bloqueB -> llam_func .)
    VAR             reduce using rule 36 (bloqueB -> llam_func .)
    ID              reduce using rule 36 (bloqueB -> llam_func .)
    RETURN          reduce using rule 36 (bloqueB -> llam_func .)
    RCURLY          reduce using rule 36 (bloqueB -> llam_func .)


state 56

    (37) bloqueB -> regresar .

    FOR             reduce using rule 37 (bloqueB -> regresar .)
    WHILE           reduce using rule 37 (bloqueB -> regresar .)
    IF              reduce using rule 37 (bloqueB -> regresar .)
    ESCRITURA       reduce using rule 37 (bloqueB -> regresar .)
    LECTURA         reduce using rule 37 (bloqueB -> regresar .)
    VAR             reduce using rule 37 (bloqueB -> regresar .)
    ID              reduce using rule 37 (bloqueB -> regresar .)
    RETURN          reduce using rule 37 (bloqueB -> regresar .)
    RCURLY          reduce using rule 37 (bloqueB -> regresar .)


state 57

    (40) asignacion -> llam_vars . ASSIGN expresion

    ASSIGN          shift and go to state 75


state 58

    (77) ciclo_para_cada -> FOR . LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY

    LPAREN          shift and go to state 76


state 59

    (73) llam_func -> ID . LPAREN llam_params RPAREN
    (41) llam_vars -> ID . llam_varsB
    (42) llam_varsB -> . LBRACE CTEENT RBRACE
    (43) llam_varsB -> . LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE
    (44) llam_varsB -> . empty
    (95) empty -> .

    LPAREN          shift and go to state 77
    LBRACE          shift and go to state 79
    ASSIGN          reduce using rule 95 (empty -> .)

    llam_varsB                     shift and go to state 78
    empty                          shift and go to state 80

state 60

    (80) ciclo_mientras -> WHILE . LPAREN expresion RPAREN LCURLY bloque RCURLY

    LPAREN          shift and go to state 81


state 61

    (81) condicion -> IF . LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB

    LPAREN          shift and go to state 82


state 62

    (84) escribir -> ESCRITURA . LPAREN escribirB RPAREN

    LPAREN          shift and go to state 83


state 63

    (89) leer -> LECTURA . LPAREN leerI RPAREN

    LPAREN          shift and go to state 84


state 64

    (93) regresar -> RETURN . LPAREN expresion RPAREN

    LPAREN          shift and go to state 85


state 65

    (23) dec_params -> ID . punto_semantico_11 COLON tipo punto_semantico_5 punto_semantico_12 dec_paramsB
    (106) punto_semantico_11 -> .

    COLON           reduce using rule 106 (punto_semantico_11 -> .)

    punto_semantico_11             shift and go to state 86

state 66

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB . RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14

    RPAREN          shift and go to state 87


state 67

    (21) dec_funcB -> dec_params .

    RPAREN          reduce using rule 21 (dec_funcB -> dec_params .)


state 68

    (22) dec_funcB -> empty .

    RPAREN          reduce using rule 22 (dec_funcB -> empty .)


state 69

    (7) dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 . dec_varsBB
    (14) dec_varsBB -> . dec_vars
    (15) dec_varsBB -> . empty
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (95) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 9
    FUNCION         reduce using rule 95 (empty -> .)
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)

  ! VAR             [ reduce using rule 95 (empty -> .) ]

    dec_varsBB                     shift and go to state 88
    dec_vars                       shift and go to state 89
    empty                          shift and go to state 90

state 70

    (11) dec_varsB -> LBRACE CTEENT . punto_semantico_6 RBRACE
    (12) dec_varsB -> LBRACE CTEENT . punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE
    (101) punto_semantico_6 -> .

    RBRACE          reduce using rule 101 (punto_semantico_6 -> .)

    punto_semantico_6              shift and go to state 91

state 71

    (94) inicio -> MAIN puntos_semantica_15 LPAREN RPAREN LCURLY bloque RCURLY . punto_semantico_14
    (109) punto_semantico_14 -> .

    $end            reduce using rule 109 (punto_semantico_14 -> .)

    punto_semantico_14             shift and go to state 92

state 72

    (38) bloqueBB -> bloqueB . bloqueBB
    (38) bloqueBB -> . bloqueB bloqueBB
    (39) bloqueBB -> . empty
    (29) bloqueB -> . asignacion
    (30) bloqueB -> . ciclo_para_cada
    (31) bloqueB -> . ciclo_mientras
    (32) bloqueB -> . condicion
    (33) bloqueB -> . escribir
    (34) bloqueB -> . leer
    (35) bloqueB -> . dec_vars
    (36) bloqueB -> . llam_func
    (37) bloqueB -> . regresar
    (95) empty -> .
    (40) asignacion -> . llam_vars ASSIGN expresion
    (77) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (80) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (81) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (84) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (89) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (73) llam_func -> . ID LPAREN llam_params RPAREN
    (93) regresar -> . RETURN LPAREN expresion RPAREN
    (41) llam_vars -> . ID llam_varsB

    RCURLY          reduce using rule 95 (empty -> .)
    FOR             shift and go to state 58
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    ESCRITURA       shift and go to state 62
    LECTURA         shift and go to state 63
    VAR             shift and go to state 9
    ID              shift and go to state 59
    RETURN          shift and go to state 64

    bloqueB                        shift and go to state 72
    bloqueBB                       shift and go to state 93
    empty                          shift and go to state 74
    asignacion                     shift and go to state 48
    ciclo_para_cada                shift and go to state 49
    ciclo_mientras                 shift and go to state 50
    condicion                      shift and go to state 51
    escribir                       shift and go to state 52
    leer                           shift and go to state 53
    dec_vars                       shift and go to state 54
    llam_func                      shift and go to state 55
    regresar                       shift and go to state 56
    llam_vars                      shift and go to state 57

state 73

    (28) bloque -> bloqueB bloqueBB .

    RCURLY          reduce using rule 28 (bloque -> bloqueB bloqueBB .)


state 74

    (39) bloqueBB -> empty .

    RCURLY          reduce using rule 39 (bloqueBB -> empty .)


state 75

    (40) asignacion -> llam_vars ASSIGN . expresion
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    llam_vars                      shift and go to state 94
    expresion                      shift and go to state 95
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_func                      shift and go to state 102

state 76

    (77) ciclo_para_cada -> FOR LPAREN . ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY

    ID              shift and go to state 106


state 77

    (73) llam_func -> ID LPAREN . llam_params RPAREN
    (74) llam_params -> . expresion llam_paramsB
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    llam_params                    shift and go to state 107
    expresion                      shift and go to state 108
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 78

    (41) llam_vars -> ID llam_varsB .

    ASSIGN          reduce using rule 41 (llam_vars -> ID llam_varsB .)
    TIMES           reduce using rule 41 (llam_vars -> ID llam_varsB .)
    DIVIDE          reduce using rule 41 (llam_vars -> ID llam_varsB .)
    PLUS            reduce using rule 41 (llam_vars -> ID llam_varsB .)
    MINUS           reduce using rule 41 (llam_vars -> ID llam_varsB .)
    LT              reduce using rule 41 (llam_vars -> ID llam_varsB .)
    GT              reduce using rule 41 (llam_vars -> ID llam_varsB .)
    LTE             reduce using rule 41 (llam_vars -> ID llam_varsB .)
    GTE             reduce using rule 41 (llam_vars -> ID llam_varsB .)
    EQUAL           reduce using rule 41 (llam_vars -> ID llam_varsB .)
    NEQUAL          reduce using rule 41 (llam_vars -> ID llam_varsB .)
    AND             reduce using rule 41 (llam_vars -> ID llam_varsB .)
    OR              reduce using rule 41 (llam_vars -> ID llam_varsB .)
    FOR             reduce using rule 41 (llam_vars -> ID llam_varsB .)
    WHILE           reduce using rule 41 (llam_vars -> ID llam_varsB .)
    IF              reduce using rule 41 (llam_vars -> ID llam_varsB .)
    ESCRITURA       reduce using rule 41 (llam_vars -> ID llam_varsB .)
    LECTURA         reduce using rule 41 (llam_vars -> ID llam_varsB .)
    VAR             reduce using rule 41 (llam_vars -> ID llam_varsB .)
    ID              reduce using rule 41 (llam_vars -> ID llam_varsB .)
    RETURN          reduce using rule 41 (llam_vars -> ID llam_varsB .)
    RCURLY          reduce using rule 41 (llam_vars -> ID llam_varsB .)
    COMMA           reduce using rule 41 (llam_vars -> ID llam_varsB .)
    RPAREN          reduce using rule 41 (llam_vars -> ID llam_varsB .)


state 79

    (42) llam_varsB -> LBRACE . CTEENT RBRACE
    (43) llam_varsB -> LBRACE . CTEENT RBRACE LBRACE CTEENT RBRACE

    CTEENT          shift and go to state 109


state 80

    (44) llam_varsB -> empty .

    ASSIGN          reduce using rule 44 (llam_varsB -> empty .)
    TIMES           reduce using rule 44 (llam_varsB -> empty .)
    DIVIDE          reduce using rule 44 (llam_varsB -> empty .)
    PLUS            reduce using rule 44 (llam_varsB -> empty .)
    MINUS           reduce using rule 44 (llam_varsB -> empty .)
    LT              reduce using rule 44 (llam_varsB -> empty .)
    GT              reduce using rule 44 (llam_varsB -> empty .)
    LTE             reduce using rule 44 (llam_varsB -> empty .)
    GTE             reduce using rule 44 (llam_varsB -> empty .)
    EQUAL           reduce using rule 44 (llam_varsB -> empty .)
    NEQUAL          reduce using rule 44 (llam_varsB -> empty .)
    AND             reduce using rule 44 (llam_varsB -> empty .)
    OR              reduce using rule 44 (llam_varsB -> empty .)
    FOR             reduce using rule 44 (llam_varsB -> empty .)
    WHILE           reduce using rule 44 (llam_varsB -> empty .)
    IF              reduce using rule 44 (llam_varsB -> empty .)
    ESCRITURA       reduce using rule 44 (llam_varsB -> empty .)
    LECTURA         reduce using rule 44 (llam_varsB -> empty .)
    VAR             reduce using rule 44 (llam_varsB -> empty .)
    ID              reduce using rule 44 (llam_varsB -> empty .)
    RETURN          reduce using rule 44 (llam_varsB -> empty .)
    RCURLY          reduce using rule 44 (llam_varsB -> empty .)
    COMMA           reduce using rule 44 (llam_varsB -> empty .)
    RPAREN          reduce using rule 44 (llam_varsB -> empty .)


state 81

    (80) ciclo_mientras -> WHILE LPAREN . expresion RPAREN LCURLY bloque RCURLY
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    expresion                      shift and go to state 110
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 82

    (81) condicion -> IF LPAREN . expresion RPAREN LCURLY bloque RCURLY condicionB
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    expresion                      shift and go to state 111
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 83

    (84) escribir -> ESCRITURA LPAREN . escribirB RPAREN
    (85) escribirB -> . expresion escribirBB
    (86) escribirB -> . CTEFRASE escribirBB
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    CTEFRASE        shift and go to state 114
    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    escribirB                      shift and go to state 112
    expresion                      shift and go to state 113
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 84

    (89) leer -> LECTURA LPAREN . leerI RPAREN
    (90) leerI -> . ID leerII

    ID              shift and go to state 116

    leerI                          shift and go to state 115

state 85

    (93) regresar -> RETURN LPAREN . expresion RPAREN
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    expresion                      shift and go to state 117
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 86

    (23) dec_params -> ID punto_semantico_11 . COLON tipo punto_semantico_5 punto_semantico_12 dec_paramsB

    COLON           shift and go to state 118


state 87

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN . COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14

    COLON           shift and go to state 119


state 88

    (7) dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .

    FUNCION         reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    FOR             reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    WHILE           reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    IF              reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    ESCRITURA       reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    LECTURA         reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    VAR             reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    ID              reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    RETURN          reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)
    RCURLY          reduce using rule 7 (dec_vars -> VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB .)


state 89

    (14) dec_varsBB -> dec_vars .

    FUNCION         reduce using rule 14 (dec_varsBB -> dec_vars .)
    FOR             reduce using rule 14 (dec_varsBB -> dec_vars .)
    WHILE           reduce using rule 14 (dec_varsBB -> dec_vars .)
    IF              reduce using rule 14 (dec_varsBB -> dec_vars .)
    ESCRITURA       reduce using rule 14 (dec_varsBB -> dec_vars .)
    LECTURA         reduce using rule 14 (dec_varsBB -> dec_vars .)
    VAR             reduce using rule 14 (dec_varsBB -> dec_vars .)
    ID              reduce using rule 14 (dec_varsBB -> dec_vars .)
    RETURN          reduce using rule 14 (dec_varsBB -> dec_vars .)
    RCURLY          reduce using rule 14 (dec_varsBB -> dec_vars .)


state 90

    (15) dec_varsBB -> empty .

    FUNCION         reduce using rule 15 (dec_varsBB -> empty .)
    FOR             reduce using rule 15 (dec_varsBB -> empty .)
    WHILE           reduce using rule 15 (dec_varsBB -> empty .)
    IF              reduce using rule 15 (dec_varsBB -> empty .)
    ESCRITURA       reduce using rule 15 (dec_varsBB -> empty .)
    LECTURA         reduce using rule 15 (dec_varsBB -> empty .)
    VAR             reduce using rule 15 (dec_varsBB -> empty .)
    ID              reduce using rule 15 (dec_varsBB -> empty .)
    RETURN          reduce using rule 15 (dec_varsBB -> empty .)
    RCURLY          reduce using rule 15 (dec_varsBB -> empty .)


state 91

    (11) dec_varsB -> LBRACE CTEENT punto_semantico_6 . RBRACE
    (12) dec_varsB -> LBRACE CTEENT punto_semantico_6 . RBRACE LBRACE CTEENT punto_semantico_7 RBRACE

    RBRACE          shift and go to state 120


state 92

    (94) inicio -> MAIN puntos_semantica_15 LPAREN RPAREN LCURLY bloque RCURLY punto_semantico_14 .

    $end            reduce using rule 94 (inicio -> MAIN puntos_semantica_15 LPAREN RPAREN LCURLY bloque RCURLY punto_semantico_14 .)


state 93

    (38) bloqueBB -> bloqueB bloqueBB .

    RCURLY          reduce using rule 38 (bloqueBB -> bloqueB bloqueBB .)


state 94

    (69) factor -> llam_vars .

    TIMES           reduce using rule 69 (factor -> llam_vars .)
    DIVIDE          reduce using rule 69 (factor -> llam_vars .)
    PLUS            reduce using rule 69 (factor -> llam_vars .)
    MINUS           reduce using rule 69 (factor -> llam_vars .)
    LT              reduce using rule 69 (factor -> llam_vars .)
    GT              reduce using rule 69 (factor -> llam_vars .)
    LTE             reduce using rule 69 (factor -> llam_vars .)
    GTE             reduce using rule 69 (factor -> llam_vars .)
    EQUAL           reduce using rule 69 (factor -> llam_vars .)
    NEQUAL          reduce using rule 69 (factor -> llam_vars .)
    AND             reduce using rule 69 (factor -> llam_vars .)
    OR              reduce using rule 69 (factor -> llam_vars .)
    ASSIGN          reduce using rule 69 (factor -> llam_vars .)
    FOR             reduce using rule 69 (factor -> llam_vars .)
    WHILE           reduce using rule 69 (factor -> llam_vars .)
    IF              reduce using rule 69 (factor -> llam_vars .)
    ESCRITURA       reduce using rule 69 (factor -> llam_vars .)
    LECTURA         reduce using rule 69 (factor -> llam_vars .)
    VAR             reduce using rule 69 (factor -> llam_vars .)
    ID              reduce using rule 69 (factor -> llam_vars .)
    RETURN          reduce using rule 69 (factor -> llam_vars .)
    RCURLY          reduce using rule 69 (factor -> llam_vars .)
    COMMA           reduce using rule 69 (factor -> llam_vars .)
    RPAREN          reduce using rule 69 (factor -> llam_vars .)


state 95

    (40) asignacion -> llam_vars ASSIGN expresion .

    FOR             reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)
    WHILE           reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)
    IF              reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)
    ESCRITURA       reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)
    LECTURA         reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)
    VAR             reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)
    ID              reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)
    RETURN          reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)
    RCURLY          reduce using rule 40 (asignacion -> llam_vars ASSIGN expresion .)


state 96

    (45) expresion -> peta_exp . expresionB
    (46) expresionB -> . ASSIGN expresion
    (47) expresionB -> . empty
    (95) empty -> .

    ASSIGN          shift and go to state 122
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    VAR             reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)

    expresionB                     shift and go to state 121
    empty                          shift and go to state 123

state 97

    (48) peta_exp -> tera_exp . peta_expB
    (49) peta_expB -> . AND peta_exp
    (50) peta_expB -> . OR peta_exp
    (51) peta_expB -> . empty
    (95) empty -> .

    AND             shift and go to state 125
    OR              shift and go to state 126
    ASSIGN          reduce using rule 95 (empty -> .)
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    VAR             reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)

    peta_expB                      shift and go to state 124
    empty                          shift and go to state 127

state 98

    (52) tera_exp -> mega_exp . tera_expB
    (53) tera_expB -> . LT tera_exp
    (54) tera_expB -> . GT tera_exp
    (55) tera_expB -> . LTE tera_exp
    (56) tera_expB -> . GTE tera_exp
    (57) tera_expB -> . EQUAL tera_exp
    (58) tera_expB -> . NEQUAL tera_exp
    (59) tera_expB -> . empty
    (95) empty -> .

    LT              shift and go to state 129
    GT              shift and go to state 130
    LTE             shift and go to state 131
    GTE             shift and go to state 132
    EQUAL           shift and go to state 133
    NEQUAL          shift and go to state 134
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    ASSIGN          reduce using rule 95 (empty -> .)
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    VAR             reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)

    tera_expB                      shift and go to state 128
    empty                          shift and go to state 135

state 99

    (60) mega_exp -> kilo_exp . mega_expB
    (61) mega_expB -> . PLUS mega_exp
    (62) mega_expB -> . MINUS mega_exp
    (63) mega_expB -> . empty
    (95) empty -> .

    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    LT              reduce using rule 95 (empty -> .)
    GT              reduce using rule 95 (empty -> .)
    LTE             reduce using rule 95 (empty -> .)
    GTE             reduce using rule 95 (empty -> .)
    EQUAL           reduce using rule 95 (empty -> .)
    NEQUAL          reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    ASSIGN          reduce using rule 95 (empty -> .)
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    VAR             reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)

    mega_expB                      shift and go to state 136
    empty                          shift and go to state 139

state 100

    (64) kilo_exp -> factor . kilo_expB
    (65) kilo_expB -> . TIMES kilo_exp
    (66) kilo_expB -> . DIVIDE kilo_exp
    (67) kilo_expB -> . empty
    (95) empty -> .

    TIMES           shift and go to state 141
    DIVIDE          shift and go to state 142
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    LT              reduce using rule 95 (empty -> .)
    GT              reduce using rule 95 (empty -> .)
    LTE             reduce using rule 95 (empty -> .)
    GTE             reduce using rule 95 (empty -> .)
    EQUAL           reduce using rule 95 (empty -> .)
    NEQUAL          reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    ASSIGN          reduce using rule 95 (empty -> .)
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    VAR             reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)

    kilo_expB                      shift and go to state 140
    empty                          shift and go to state 143

state 101

    (68) factor -> LPAREN . expresion RPAREN
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    expresion                      shift and go to state 144
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 102

    (70) factor -> llam_func .

    TIMES           reduce using rule 70 (factor -> llam_func .)
    DIVIDE          reduce using rule 70 (factor -> llam_func .)
    PLUS            reduce using rule 70 (factor -> llam_func .)
    MINUS           reduce using rule 70 (factor -> llam_func .)
    LT              reduce using rule 70 (factor -> llam_func .)
    GT              reduce using rule 70 (factor -> llam_func .)
    LTE             reduce using rule 70 (factor -> llam_func .)
    GTE             reduce using rule 70 (factor -> llam_func .)
    EQUAL           reduce using rule 70 (factor -> llam_func .)
    NEQUAL          reduce using rule 70 (factor -> llam_func .)
    AND             reduce using rule 70 (factor -> llam_func .)
    OR              reduce using rule 70 (factor -> llam_func .)
    ASSIGN          reduce using rule 70 (factor -> llam_func .)
    FOR             reduce using rule 70 (factor -> llam_func .)
    WHILE           reduce using rule 70 (factor -> llam_func .)
    IF              reduce using rule 70 (factor -> llam_func .)
    ESCRITURA       reduce using rule 70 (factor -> llam_func .)
    LECTURA         reduce using rule 70 (factor -> llam_func .)
    VAR             reduce using rule 70 (factor -> llam_func .)
    ID              reduce using rule 70 (factor -> llam_func .)
    RETURN          reduce using rule 70 (factor -> llam_func .)
    RCURLY          reduce using rule 70 (factor -> llam_func .)
    COMMA           reduce using rule 70 (factor -> llam_func .)
    RPAREN          reduce using rule 70 (factor -> llam_func .)


state 103

    (71) factor -> CTEENT .

    TIMES           reduce using rule 71 (factor -> CTEENT .)
    DIVIDE          reduce using rule 71 (factor -> CTEENT .)
    PLUS            reduce using rule 71 (factor -> CTEENT .)
    MINUS           reduce using rule 71 (factor -> CTEENT .)
    LT              reduce using rule 71 (factor -> CTEENT .)
    GT              reduce using rule 71 (factor -> CTEENT .)
    LTE             reduce using rule 71 (factor -> CTEENT .)
    GTE             reduce using rule 71 (factor -> CTEENT .)
    EQUAL           reduce using rule 71 (factor -> CTEENT .)
    NEQUAL          reduce using rule 71 (factor -> CTEENT .)
    AND             reduce using rule 71 (factor -> CTEENT .)
    OR              reduce using rule 71 (factor -> CTEENT .)
    ASSIGN          reduce using rule 71 (factor -> CTEENT .)
    FOR             reduce using rule 71 (factor -> CTEENT .)
    WHILE           reduce using rule 71 (factor -> CTEENT .)
    IF              reduce using rule 71 (factor -> CTEENT .)
    ESCRITURA       reduce using rule 71 (factor -> CTEENT .)
    LECTURA         reduce using rule 71 (factor -> CTEENT .)
    VAR             reduce using rule 71 (factor -> CTEENT .)
    ID              reduce using rule 71 (factor -> CTEENT .)
    RETURN          reduce using rule 71 (factor -> CTEENT .)
    RCURLY          reduce using rule 71 (factor -> CTEENT .)
    COMMA           reduce using rule 71 (factor -> CTEENT .)
    RPAREN          reduce using rule 71 (factor -> CTEENT .)


state 104

    (72) factor -> CTEDECI .

    TIMES           reduce using rule 72 (factor -> CTEDECI .)
    DIVIDE          reduce using rule 72 (factor -> CTEDECI .)
    PLUS            reduce using rule 72 (factor -> CTEDECI .)
    MINUS           reduce using rule 72 (factor -> CTEDECI .)
    LT              reduce using rule 72 (factor -> CTEDECI .)
    GT              reduce using rule 72 (factor -> CTEDECI .)
    LTE             reduce using rule 72 (factor -> CTEDECI .)
    GTE             reduce using rule 72 (factor -> CTEDECI .)
    EQUAL           reduce using rule 72 (factor -> CTEDECI .)
    NEQUAL          reduce using rule 72 (factor -> CTEDECI .)
    AND             reduce using rule 72 (factor -> CTEDECI .)
    OR              reduce using rule 72 (factor -> CTEDECI .)
    ASSIGN          reduce using rule 72 (factor -> CTEDECI .)
    FOR             reduce using rule 72 (factor -> CTEDECI .)
    WHILE           reduce using rule 72 (factor -> CTEDECI .)
    IF              reduce using rule 72 (factor -> CTEDECI .)
    ESCRITURA       reduce using rule 72 (factor -> CTEDECI .)
    LECTURA         reduce using rule 72 (factor -> CTEDECI .)
    VAR             reduce using rule 72 (factor -> CTEDECI .)
    ID              reduce using rule 72 (factor -> CTEDECI .)
    RETURN          reduce using rule 72 (factor -> CTEDECI .)
    RCURLY          reduce using rule 72 (factor -> CTEDECI .)
    COMMA           reduce using rule 72 (factor -> CTEDECI .)
    RPAREN          reduce using rule 72 (factor -> CTEDECI .)


state 105

    (41) llam_vars -> ID . llam_varsB
    (73) llam_func -> ID . LPAREN llam_params RPAREN
    (42) llam_varsB -> . LBRACE CTEENT RBRACE
    (43) llam_varsB -> . LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE
    (44) llam_varsB -> . empty
    (95) empty -> .

    LPAREN          shift and go to state 77
    LBRACE          shift and go to state 79
    TIMES           reduce using rule 95 (empty -> .)
    DIVIDE          reduce using rule 95 (empty -> .)
    PLUS            reduce using rule 95 (empty -> .)
    MINUS           reduce using rule 95 (empty -> .)
    LT              reduce using rule 95 (empty -> .)
    GT              reduce using rule 95 (empty -> .)
    LTE             reduce using rule 95 (empty -> .)
    GTE             reduce using rule 95 (empty -> .)
    EQUAL           reduce using rule 95 (empty -> .)
    NEQUAL          reduce using rule 95 (empty -> .)
    AND             reduce using rule 95 (empty -> .)
    OR              reduce using rule 95 (empty -> .)
    ASSIGN          reduce using rule 95 (empty -> .)
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    VAR             reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)

    llam_varsB                     shift and go to state 78
    empty                          shift and go to state 80

state 106

    (77) ciclo_para_cada -> FOR LPAREN ID . IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY

    IN              shift and go to state 145


state 107

    (73) llam_func -> ID LPAREN llam_params . RPAREN

    RPAREN          shift and go to state 146


state 108

    (74) llam_params -> expresion . llam_paramsB
    (75) llam_paramsB -> . COMMA llam_params
    (76) llam_paramsB -> . empty
    (95) empty -> .

    COMMA           shift and go to state 148
    RPAREN          reduce using rule 95 (empty -> .)

    llam_paramsB                   shift and go to state 147
    empty                          shift and go to state 149

state 109

    (42) llam_varsB -> LBRACE CTEENT . RBRACE
    (43) llam_varsB -> LBRACE CTEENT . RBRACE LBRACE CTEENT RBRACE

    RBRACE          shift and go to state 150


state 110

    (80) ciclo_mientras -> WHILE LPAREN expresion . RPAREN LCURLY bloque RCURLY

    RPAREN          shift and go to state 151


state 111

    (81) condicion -> IF LPAREN expresion . RPAREN LCURLY bloque RCURLY condicionB

    RPAREN          shift and go to state 152


state 112

    (84) escribir -> ESCRITURA LPAREN escribirB . RPAREN

    RPAREN          shift and go to state 153


state 113

    (85) escribirB -> expresion . escribirBB
    (87) escribirBB -> . COMMA escribirB
    (88) escribirBB -> . empty
    (95) empty -> .

    COMMA           shift and go to state 155
    RPAREN          reduce using rule 95 (empty -> .)

    escribirBB                     shift and go to state 154
    empty                          shift and go to state 156

state 114

    (86) escribirB -> CTEFRASE . escribirBB
    (87) escribirBB -> . COMMA escribirB
    (88) escribirBB -> . empty
    (95) empty -> .

    COMMA           shift and go to state 155
    RPAREN          reduce using rule 95 (empty -> .)

    escribirBB                     shift and go to state 157
    empty                          shift and go to state 156

state 115

    (89) leer -> LECTURA LPAREN leerI . RPAREN

    RPAREN          shift and go to state 158


state 116

    (90) leerI -> ID . leerII
    (91) leerII -> . COMMA ID
    (92) leerII -> . empty
    (95) empty -> .

    COMMA           shift and go to state 160
    RPAREN          reduce using rule 95 (empty -> .)

    leerII                         shift and go to state 159
    empty                          shift and go to state 161

state 117

    (93) regresar -> RETURN LPAREN expresion . RPAREN

    RPAREN          shift and go to state 162


state 118

    (23) dec_params -> ID punto_semantico_11 COLON . tipo punto_semantico_5 punto_semantico_12 dec_paramsB
    (16) tipo -> . TIPOENT
    (17) tipo -> . TIPODEC
    (18) tipo -> . TIPOLETRA
    (19) tipo -> . TIPOLOGI

    TIPOENT         shift and go to state 29
    TIPODEC         shift and go to state 30
    TIPOLETRA       shift and go to state 31
    TIPOLOGI        shift and go to state 32

    tipo                           shift and go to state 163

state 119

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON . tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14
    (26) tipo_func -> . tipo
    (27) tipo_func -> . VOID
    (16) tipo -> . TIPOENT
    (17) tipo -> . TIPODEC
    (18) tipo -> . TIPOLETRA
    (19) tipo -> . TIPOLOGI

    VOID            shift and go to state 166
    TIPOENT         shift and go to state 29
    TIPODEC         shift and go to state 30
    TIPOLETRA       shift and go to state 31
    TIPOLOGI        shift and go to state 32

    tipo_func                      shift and go to state 164
    tipo                           shift and go to state 165

state 120

    (11) dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .
    (12) dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE . LBRACE CTEENT punto_semantico_7 RBRACE

    VAR             reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    FUNCION         reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    FOR             reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    WHILE           reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    IF              reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    ESCRITURA       reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    LECTURA         reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    ID              reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    RETURN          reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    RCURLY          reduce using rule 11 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE .)
    LBRACE          shift and go to state 167


state 121

    (45) expresion -> peta_exp expresionB .

    FOR             reduce using rule 45 (expresion -> peta_exp expresionB .)
    WHILE           reduce using rule 45 (expresion -> peta_exp expresionB .)
    IF              reduce using rule 45 (expresion -> peta_exp expresionB .)
    ESCRITURA       reduce using rule 45 (expresion -> peta_exp expresionB .)
    LECTURA         reduce using rule 45 (expresion -> peta_exp expresionB .)
    VAR             reduce using rule 45 (expresion -> peta_exp expresionB .)
    ID              reduce using rule 45 (expresion -> peta_exp expresionB .)
    RETURN          reduce using rule 45 (expresion -> peta_exp expresionB .)
    RCURLY          reduce using rule 45 (expresion -> peta_exp expresionB .)
    COMMA           reduce using rule 45 (expresion -> peta_exp expresionB .)
    RPAREN          reduce using rule 45 (expresion -> peta_exp expresionB .)


state 122

    (46) expresionB -> ASSIGN . expresion
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    expresion                      shift and go to state 168
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 123

    (47) expresionB -> empty .

    FOR             reduce using rule 47 (expresionB -> empty .)
    WHILE           reduce using rule 47 (expresionB -> empty .)
    IF              reduce using rule 47 (expresionB -> empty .)
    ESCRITURA       reduce using rule 47 (expresionB -> empty .)
    LECTURA         reduce using rule 47 (expresionB -> empty .)
    VAR             reduce using rule 47 (expresionB -> empty .)
    ID              reduce using rule 47 (expresionB -> empty .)
    RETURN          reduce using rule 47 (expresionB -> empty .)
    RCURLY          reduce using rule 47 (expresionB -> empty .)
    COMMA           reduce using rule 47 (expresionB -> empty .)
    RPAREN          reduce using rule 47 (expresionB -> empty .)


state 124

    (48) peta_exp -> tera_exp peta_expB .

    ASSIGN          reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    FOR             reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    WHILE           reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    IF              reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    ESCRITURA       reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    LECTURA         reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    VAR             reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    ID              reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    RETURN          reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    RCURLY          reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    COMMA           reduce using rule 48 (peta_exp -> tera_exp peta_expB .)
    RPAREN          reduce using rule 48 (peta_exp -> tera_exp peta_expB .)


state 125

    (49) peta_expB -> AND . peta_exp
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    peta_exp                       shift and go to state 169
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 126

    (50) peta_expB -> OR . peta_exp
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    peta_exp                       shift and go to state 170
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 127

    (51) peta_expB -> empty .

    ASSIGN          reduce using rule 51 (peta_expB -> empty .)
    FOR             reduce using rule 51 (peta_expB -> empty .)
    WHILE           reduce using rule 51 (peta_expB -> empty .)
    IF              reduce using rule 51 (peta_expB -> empty .)
    ESCRITURA       reduce using rule 51 (peta_expB -> empty .)
    LECTURA         reduce using rule 51 (peta_expB -> empty .)
    VAR             reduce using rule 51 (peta_expB -> empty .)
    ID              reduce using rule 51 (peta_expB -> empty .)
    RETURN          reduce using rule 51 (peta_expB -> empty .)
    RCURLY          reduce using rule 51 (peta_expB -> empty .)
    COMMA           reduce using rule 51 (peta_expB -> empty .)
    RPAREN          reduce using rule 51 (peta_expB -> empty .)


state 128

    (52) tera_exp -> mega_exp tera_expB .

    AND             reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    OR              reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    ASSIGN          reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    FOR             reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    WHILE           reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    IF              reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    ESCRITURA       reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    LECTURA         reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    VAR             reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    ID              reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    RETURN          reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    RCURLY          reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    COMMA           reduce using rule 52 (tera_exp -> mega_exp tera_expB .)
    RPAREN          reduce using rule 52 (tera_exp -> mega_exp tera_expB .)


state 129

    (53) tera_expB -> LT . tera_exp
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    tera_exp                       shift and go to state 171
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 130

    (54) tera_expB -> GT . tera_exp
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    tera_exp                       shift and go to state 172
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 131

    (55) tera_expB -> LTE . tera_exp
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    tera_exp                       shift and go to state 173
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 132

    (56) tera_expB -> GTE . tera_exp
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    tera_exp                       shift and go to state 174
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 133

    (57) tera_expB -> EQUAL . tera_exp
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    tera_exp                       shift and go to state 175
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 134

    (58) tera_expB -> NEQUAL . tera_exp
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    tera_exp                       shift and go to state 176
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 135

    (59) tera_expB -> empty .

    AND             reduce using rule 59 (tera_expB -> empty .)
    OR              reduce using rule 59 (tera_expB -> empty .)
    ASSIGN          reduce using rule 59 (tera_expB -> empty .)
    FOR             reduce using rule 59 (tera_expB -> empty .)
    WHILE           reduce using rule 59 (tera_expB -> empty .)
    IF              reduce using rule 59 (tera_expB -> empty .)
    ESCRITURA       reduce using rule 59 (tera_expB -> empty .)
    LECTURA         reduce using rule 59 (tera_expB -> empty .)
    VAR             reduce using rule 59 (tera_expB -> empty .)
    ID              reduce using rule 59 (tera_expB -> empty .)
    RETURN          reduce using rule 59 (tera_expB -> empty .)
    RCURLY          reduce using rule 59 (tera_expB -> empty .)
    COMMA           reduce using rule 59 (tera_expB -> empty .)
    RPAREN          reduce using rule 59 (tera_expB -> empty .)


state 136

    (60) mega_exp -> kilo_exp mega_expB .

    LT              reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    GT              reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    LTE             reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    GTE             reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    EQUAL           reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    NEQUAL          reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    AND             reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    OR              reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    ASSIGN          reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    FOR             reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    WHILE           reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    IF              reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    ESCRITURA       reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    LECTURA         reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    VAR             reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    ID              reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    RETURN          reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    RCURLY          reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    COMMA           reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)
    RPAREN          reduce using rule 60 (mega_exp -> kilo_exp mega_expB .)


state 137

    (61) mega_expB -> PLUS . mega_exp
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    mega_exp                       shift and go to state 177
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 138

    (62) mega_expB -> MINUS . mega_exp
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    mega_exp                       shift and go to state 178
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 139

    (63) mega_expB -> empty .

    LT              reduce using rule 63 (mega_expB -> empty .)
    GT              reduce using rule 63 (mega_expB -> empty .)
    LTE             reduce using rule 63 (mega_expB -> empty .)
    GTE             reduce using rule 63 (mega_expB -> empty .)
    EQUAL           reduce using rule 63 (mega_expB -> empty .)
    NEQUAL          reduce using rule 63 (mega_expB -> empty .)
    AND             reduce using rule 63 (mega_expB -> empty .)
    OR              reduce using rule 63 (mega_expB -> empty .)
    ASSIGN          reduce using rule 63 (mega_expB -> empty .)
    FOR             reduce using rule 63 (mega_expB -> empty .)
    WHILE           reduce using rule 63 (mega_expB -> empty .)
    IF              reduce using rule 63 (mega_expB -> empty .)
    ESCRITURA       reduce using rule 63 (mega_expB -> empty .)
    LECTURA         reduce using rule 63 (mega_expB -> empty .)
    VAR             reduce using rule 63 (mega_expB -> empty .)
    ID              reduce using rule 63 (mega_expB -> empty .)
    RETURN          reduce using rule 63 (mega_expB -> empty .)
    RCURLY          reduce using rule 63 (mega_expB -> empty .)
    COMMA           reduce using rule 63 (mega_expB -> empty .)
    RPAREN          reduce using rule 63 (mega_expB -> empty .)


state 140

    (64) kilo_exp -> factor kilo_expB .

    PLUS            reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    MINUS           reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    LT              reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    GT              reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    LTE             reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    GTE             reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    EQUAL           reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    NEQUAL          reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    AND             reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    OR              reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    ASSIGN          reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    FOR             reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    WHILE           reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    IF              reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    ESCRITURA       reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    LECTURA         reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    VAR             reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    ID              reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    RETURN          reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    RCURLY          reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    COMMA           reduce using rule 64 (kilo_exp -> factor kilo_expB .)
    RPAREN          reduce using rule 64 (kilo_exp -> factor kilo_expB .)


state 141

    (65) kilo_expB -> TIMES . kilo_exp
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    kilo_exp                       shift and go to state 179
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 142

    (66) kilo_expB -> DIVIDE . kilo_exp
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    kilo_exp                       shift and go to state 180
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 143

    (67) kilo_expB -> empty .

    PLUS            reduce using rule 67 (kilo_expB -> empty .)
    MINUS           reduce using rule 67 (kilo_expB -> empty .)
    LT              reduce using rule 67 (kilo_expB -> empty .)
    GT              reduce using rule 67 (kilo_expB -> empty .)
    LTE             reduce using rule 67 (kilo_expB -> empty .)
    GTE             reduce using rule 67 (kilo_expB -> empty .)
    EQUAL           reduce using rule 67 (kilo_expB -> empty .)
    NEQUAL          reduce using rule 67 (kilo_expB -> empty .)
    AND             reduce using rule 67 (kilo_expB -> empty .)
    OR              reduce using rule 67 (kilo_expB -> empty .)
    ASSIGN          reduce using rule 67 (kilo_expB -> empty .)
    FOR             reduce using rule 67 (kilo_expB -> empty .)
    WHILE           reduce using rule 67 (kilo_expB -> empty .)
    IF              reduce using rule 67 (kilo_expB -> empty .)
    ESCRITURA       reduce using rule 67 (kilo_expB -> empty .)
    LECTURA         reduce using rule 67 (kilo_expB -> empty .)
    VAR             reduce using rule 67 (kilo_expB -> empty .)
    ID              reduce using rule 67 (kilo_expB -> empty .)
    RETURN          reduce using rule 67 (kilo_expB -> empty .)
    RCURLY          reduce using rule 67 (kilo_expB -> empty .)
    COMMA           reduce using rule 67 (kilo_expB -> empty .)
    RPAREN          reduce using rule 67 (kilo_expB -> empty .)


state 144

    (68) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 181


state 145

    (77) ciclo_para_cada -> FOR LPAREN ID IN . ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY

    ID              shift and go to state 182


state 146

    (73) llam_func -> ID LPAREN llam_params RPAREN .

    FOR             reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    WHILE           reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    IF              reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    ESCRITURA       reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    LECTURA         reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    VAR             reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    ID              reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    RETURN          reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    RCURLY          reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    TIMES           reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    DIVIDE          reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    PLUS            reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    MINUS           reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    LT              reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    GT              reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    LTE             reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    GTE             reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    EQUAL           reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    NEQUAL          reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    AND             reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    OR              reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    ASSIGN          reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    COMMA           reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)
    RPAREN          reduce using rule 73 (llam_func -> ID LPAREN llam_params RPAREN .)


state 147

    (74) llam_params -> expresion llam_paramsB .

    RPAREN          reduce using rule 74 (llam_params -> expresion llam_paramsB .)


state 148

    (75) llam_paramsB -> COMMA . llam_params
    (74) llam_params -> . expresion llam_paramsB
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    llam_params                    shift and go to state 183
    expresion                      shift and go to state 108
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 149

    (76) llam_paramsB -> empty .

    RPAREN          reduce using rule 76 (llam_paramsB -> empty .)


state 150

    (42) llam_varsB -> LBRACE CTEENT RBRACE .
    (43) llam_varsB -> LBRACE CTEENT RBRACE . LBRACE CTEENT RBRACE

    ASSIGN          reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    TIMES           reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    DIVIDE          reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    PLUS            reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    MINUS           reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    LT              reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    GT              reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    LTE             reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    GTE             reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    EQUAL           reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    NEQUAL          reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    AND             reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    OR              reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    FOR             reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    WHILE           reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    IF              reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    ESCRITURA       reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    LECTURA         reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    VAR             reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    ID              reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    RETURN          reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    RCURLY          reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    COMMA           reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    RPAREN          reduce using rule 42 (llam_varsB -> LBRACE CTEENT RBRACE .)
    LBRACE          shift and go to state 184


state 151

    (80) ciclo_mientras -> WHILE LPAREN expresion RPAREN . LCURLY bloque RCURLY

    LCURLY          shift and go to state 185


state 152

    (81) condicion -> IF LPAREN expresion RPAREN . LCURLY bloque RCURLY condicionB

    LCURLY          shift and go to state 186


state 153

    (84) escribir -> ESCRITURA LPAREN escribirB RPAREN .

    FOR             reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    WHILE           reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    IF              reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    ESCRITURA       reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    LECTURA         reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    VAR             reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    ID              reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    RETURN          reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    RCURLY          reduce using rule 84 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)


state 154

    (85) escribirB -> expresion escribirBB .

    RPAREN          reduce using rule 85 (escribirB -> expresion escribirBB .)


state 155

    (87) escribirBB -> COMMA . escribirB
    (85) escribirB -> . expresion escribirBB
    (86) escribirB -> . CTEFRASE escribirBB
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    CTEFRASE        shift and go to state 114
    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    escribirB                      shift and go to state 187
    expresion                      shift and go to state 113
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 156

    (88) escribirBB -> empty .

    RPAREN          reduce using rule 88 (escribirBB -> empty .)


state 157

    (86) escribirB -> CTEFRASE escribirBB .

    RPAREN          reduce using rule 86 (escribirB -> CTEFRASE escribirBB .)


state 158

    (89) leer -> LECTURA LPAREN leerI RPAREN .

    FOR             reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)
    WHILE           reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)
    IF              reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)
    ESCRITURA       reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)
    LECTURA         reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)
    VAR             reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)
    ID              reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)
    RETURN          reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)
    RCURLY          reduce using rule 89 (leer -> LECTURA LPAREN leerI RPAREN .)


state 159

    (90) leerI -> ID leerII .

    RPAREN          reduce using rule 90 (leerI -> ID leerII .)


state 160

    (91) leerII -> COMMA . ID

    ID              shift and go to state 188


state 161

    (92) leerII -> empty .

    RPAREN          reduce using rule 92 (leerII -> empty .)


state 162

    (93) regresar -> RETURN LPAREN expresion RPAREN .

    FOR             reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)
    WHILE           reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)
    IF              reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)
    ESCRITURA       reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)
    LECTURA         reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)
    VAR             reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)
    ID              reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)
    RETURN          reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)
    RCURLY          reduce using rule 93 (regresar -> RETURN LPAREN expresion RPAREN .)


state 163

    (23) dec_params -> ID punto_semantico_11 COLON tipo . punto_semantico_5 punto_semantico_12 dec_paramsB
    (100) punto_semantico_5 -> .

    COMMA           reduce using rule 100 (punto_semantico_5 -> .)
    RPAREN          reduce using rule 100 (punto_semantico_5 -> .)

    punto_semantico_5              shift and go to state 189

state 164

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func . punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14
    (108) punto_semantico_13 -> .

    LCURLY          reduce using rule 108 (punto_semantico_13 -> .)

    punto_semantico_13             shift and go to state 190

state 165

    (26) tipo_func -> tipo .

    LCURLY          reduce using rule 26 (tipo_func -> tipo .)


state 166

    (27) tipo_func -> VOID .

    LCURLY          reduce using rule 27 (tipo_func -> VOID .)


state 167

    (12) dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE . CTEENT punto_semantico_7 RBRACE

    CTEENT          shift and go to state 191


state 168

    (46) expresionB -> ASSIGN expresion .

    FOR             reduce using rule 46 (expresionB -> ASSIGN expresion .)
    WHILE           reduce using rule 46 (expresionB -> ASSIGN expresion .)
    IF              reduce using rule 46 (expresionB -> ASSIGN expresion .)
    ESCRITURA       reduce using rule 46 (expresionB -> ASSIGN expresion .)
    LECTURA         reduce using rule 46 (expresionB -> ASSIGN expresion .)
    VAR             reduce using rule 46 (expresionB -> ASSIGN expresion .)
    ID              reduce using rule 46 (expresionB -> ASSIGN expresion .)
    RETURN          reduce using rule 46 (expresionB -> ASSIGN expresion .)
    RCURLY          reduce using rule 46 (expresionB -> ASSIGN expresion .)
    COMMA           reduce using rule 46 (expresionB -> ASSIGN expresion .)
    RPAREN          reduce using rule 46 (expresionB -> ASSIGN expresion .)


state 169

    (49) peta_expB -> AND peta_exp .

    ASSIGN          reduce using rule 49 (peta_expB -> AND peta_exp .)
    FOR             reduce using rule 49 (peta_expB -> AND peta_exp .)
    WHILE           reduce using rule 49 (peta_expB -> AND peta_exp .)
    IF              reduce using rule 49 (peta_expB -> AND peta_exp .)
    ESCRITURA       reduce using rule 49 (peta_expB -> AND peta_exp .)
    LECTURA         reduce using rule 49 (peta_expB -> AND peta_exp .)
    VAR             reduce using rule 49 (peta_expB -> AND peta_exp .)
    ID              reduce using rule 49 (peta_expB -> AND peta_exp .)
    RETURN          reduce using rule 49 (peta_expB -> AND peta_exp .)
    RCURLY          reduce using rule 49 (peta_expB -> AND peta_exp .)
    COMMA           reduce using rule 49 (peta_expB -> AND peta_exp .)
    RPAREN          reduce using rule 49 (peta_expB -> AND peta_exp .)


state 170

    (50) peta_expB -> OR peta_exp .

    ASSIGN          reduce using rule 50 (peta_expB -> OR peta_exp .)
    FOR             reduce using rule 50 (peta_expB -> OR peta_exp .)
    WHILE           reduce using rule 50 (peta_expB -> OR peta_exp .)
    IF              reduce using rule 50 (peta_expB -> OR peta_exp .)
    ESCRITURA       reduce using rule 50 (peta_expB -> OR peta_exp .)
    LECTURA         reduce using rule 50 (peta_expB -> OR peta_exp .)
    VAR             reduce using rule 50 (peta_expB -> OR peta_exp .)
    ID              reduce using rule 50 (peta_expB -> OR peta_exp .)
    RETURN          reduce using rule 50 (peta_expB -> OR peta_exp .)
    RCURLY          reduce using rule 50 (peta_expB -> OR peta_exp .)
    COMMA           reduce using rule 50 (peta_expB -> OR peta_exp .)
    RPAREN          reduce using rule 50 (peta_expB -> OR peta_exp .)


state 171

    (53) tera_expB -> LT tera_exp .

    AND             reduce using rule 53 (tera_expB -> LT tera_exp .)
    OR              reduce using rule 53 (tera_expB -> LT tera_exp .)
    ASSIGN          reduce using rule 53 (tera_expB -> LT tera_exp .)
    FOR             reduce using rule 53 (tera_expB -> LT tera_exp .)
    WHILE           reduce using rule 53 (tera_expB -> LT tera_exp .)
    IF              reduce using rule 53 (tera_expB -> LT tera_exp .)
    ESCRITURA       reduce using rule 53 (tera_expB -> LT tera_exp .)
    LECTURA         reduce using rule 53 (tera_expB -> LT tera_exp .)
    VAR             reduce using rule 53 (tera_expB -> LT tera_exp .)
    ID              reduce using rule 53 (tera_expB -> LT tera_exp .)
    RETURN          reduce using rule 53 (tera_expB -> LT tera_exp .)
    RCURLY          reduce using rule 53 (tera_expB -> LT tera_exp .)
    COMMA           reduce using rule 53 (tera_expB -> LT tera_exp .)
    RPAREN          reduce using rule 53 (tera_expB -> LT tera_exp .)


state 172

    (54) tera_expB -> GT tera_exp .

    AND             reduce using rule 54 (tera_expB -> GT tera_exp .)
    OR              reduce using rule 54 (tera_expB -> GT tera_exp .)
    ASSIGN          reduce using rule 54 (tera_expB -> GT tera_exp .)
    FOR             reduce using rule 54 (tera_expB -> GT tera_exp .)
    WHILE           reduce using rule 54 (tera_expB -> GT tera_exp .)
    IF              reduce using rule 54 (tera_expB -> GT tera_exp .)
    ESCRITURA       reduce using rule 54 (tera_expB -> GT tera_exp .)
    LECTURA         reduce using rule 54 (tera_expB -> GT tera_exp .)
    VAR             reduce using rule 54 (tera_expB -> GT tera_exp .)
    ID              reduce using rule 54 (tera_expB -> GT tera_exp .)
    RETURN          reduce using rule 54 (tera_expB -> GT tera_exp .)
    RCURLY          reduce using rule 54 (tera_expB -> GT tera_exp .)
    COMMA           reduce using rule 54 (tera_expB -> GT tera_exp .)
    RPAREN          reduce using rule 54 (tera_expB -> GT tera_exp .)


state 173

    (55) tera_expB -> LTE tera_exp .

    AND             reduce using rule 55 (tera_expB -> LTE tera_exp .)
    OR              reduce using rule 55 (tera_expB -> LTE tera_exp .)
    ASSIGN          reduce using rule 55 (tera_expB -> LTE tera_exp .)
    FOR             reduce using rule 55 (tera_expB -> LTE tera_exp .)
    WHILE           reduce using rule 55 (tera_expB -> LTE tera_exp .)
    IF              reduce using rule 55 (tera_expB -> LTE tera_exp .)
    ESCRITURA       reduce using rule 55 (tera_expB -> LTE tera_exp .)
    LECTURA         reduce using rule 55 (tera_expB -> LTE tera_exp .)
    VAR             reduce using rule 55 (tera_expB -> LTE tera_exp .)
    ID              reduce using rule 55 (tera_expB -> LTE tera_exp .)
    RETURN          reduce using rule 55 (tera_expB -> LTE tera_exp .)
    RCURLY          reduce using rule 55 (tera_expB -> LTE tera_exp .)
    COMMA           reduce using rule 55 (tera_expB -> LTE tera_exp .)
    RPAREN          reduce using rule 55 (tera_expB -> LTE tera_exp .)


state 174

    (56) tera_expB -> GTE tera_exp .

    AND             reduce using rule 56 (tera_expB -> GTE tera_exp .)
    OR              reduce using rule 56 (tera_expB -> GTE tera_exp .)
    ASSIGN          reduce using rule 56 (tera_expB -> GTE tera_exp .)
    FOR             reduce using rule 56 (tera_expB -> GTE tera_exp .)
    WHILE           reduce using rule 56 (tera_expB -> GTE tera_exp .)
    IF              reduce using rule 56 (tera_expB -> GTE tera_exp .)
    ESCRITURA       reduce using rule 56 (tera_expB -> GTE tera_exp .)
    LECTURA         reduce using rule 56 (tera_expB -> GTE tera_exp .)
    VAR             reduce using rule 56 (tera_expB -> GTE tera_exp .)
    ID              reduce using rule 56 (tera_expB -> GTE tera_exp .)
    RETURN          reduce using rule 56 (tera_expB -> GTE tera_exp .)
    RCURLY          reduce using rule 56 (tera_expB -> GTE tera_exp .)
    COMMA           reduce using rule 56 (tera_expB -> GTE tera_exp .)
    RPAREN          reduce using rule 56 (tera_expB -> GTE tera_exp .)


state 175

    (57) tera_expB -> EQUAL tera_exp .

    AND             reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    OR              reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    ASSIGN          reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    FOR             reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    WHILE           reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    IF              reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    ESCRITURA       reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    LECTURA         reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    VAR             reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    ID              reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    RETURN          reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    RCURLY          reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    COMMA           reduce using rule 57 (tera_expB -> EQUAL tera_exp .)
    RPAREN          reduce using rule 57 (tera_expB -> EQUAL tera_exp .)


state 176

    (58) tera_expB -> NEQUAL tera_exp .

    AND             reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    OR              reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    ASSIGN          reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    FOR             reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    WHILE           reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    IF              reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    ESCRITURA       reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    LECTURA         reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    VAR             reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    ID              reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    RETURN          reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    RCURLY          reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    COMMA           reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)
    RPAREN          reduce using rule 58 (tera_expB -> NEQUAL tera_exp .)


state 177

    (61) mega_expB -> PLUS mega_exp .

    LT              reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    GT              reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    LTE             reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    GTE             reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    EQUAL           reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    NEQUAL          reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    AND             reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    OR              reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    ASSIGN          reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    FOR             reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    WHILE           reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    IF              reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    ESCRITURA       reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    LECTURA         reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    VAR             reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    ID              reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    RETURN          reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    RCURLY          reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    COMMA           reduce using rule 61 (mega_expB -> PLUS mega_exp .)
    RPAREN          reduce using rule 61 (mega_expB -> PLUS mega_exp .)


state 178

    (62) mega_expB -> MINUS mega_exp .

    LT              reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    GT              reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    LTE             reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    GTE             reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    EQUAL           reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    NEQUAL          reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    AND             reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    OR              reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    ASSIGN          reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    FOR             reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    WHILE           reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    IF              reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    ESCRITURA       reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    LECTURA         reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    VAR             reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    ID              reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    RETURN          reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    RCURLY          reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    COMMA           reduce using rule 62 (mega_expB -> MINUS mega_exp .)
    RPAREN          reduce using rule 62 (mega_expB -> MINUS mega_exp .)


state 179

    (65) kilo_expB -> TIMES kilo_exp .

    PLUS            reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    MINUS           reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    LT              reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    GT              reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    LTE             reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    GTE             reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    EQUAL           reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    NEQUAL          reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    AND             reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    OR              reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    ASSIGN          reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    FOR             reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    WHILE           reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    IF              reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    ESCRITURA       reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    LECTURA         reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    VAR             reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    ID              reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    RETURN          reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    RCURLY          reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    COMMA           reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)
    RPAREN          reduce using rule 65 (kilo_expB -> TIMES kilo_exp .)


state 180

    (66) kilo_expB -> DIVIDE kilo_exp .

    PLUS            reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    MINUS           reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    LT              reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    GT              reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    LTE             reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    GTE             reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    EQUAL           reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    NEQUAL          reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    AND             reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    OR              reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    ASSIGN          reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    FOR             reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    WHILE           reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    IF              reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    ESCRITURA       reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    LECTURA         reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    VAR             reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    ID              reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    RETURN          reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    RCURLY          reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    COMMA           reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)
    RPAREN          reduce using rule 66 (kilo_expB -> DIVIDE kilo_exp .)


state 181

    (68) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    LT              reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    GT              reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    LTE             reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    GTE             reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    EQUAL           reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    NEQUAL          reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    AND             reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    OR              reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    ASSIGN          reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    ESCRITURA       reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    LECTURA         reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    VAR             reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    RCURLY          reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 68 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 68 (factor -> LPAREN expresion RPAREN .)


state 182

    (77) ciclo_para_cada -> FOR LPAREN ID IN ID . ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_para_cadaB -> . CONFORME expresion
    (79) ciclo_para_cadaB -> . empty
    (95) empty -> .

    CONFORME        shift and go to state 193
    RPAREN          reduce using rule 95 (empty -> .)

    ciclo_para_cadaB               shift and go to state 192
    empty                          shift and go to state 194

state 183

    (75) llam_paramsB -> COMMA llam_params .

    RPAREN          reduce using rule 75 (llam_paramsB -> COMMA llam_params .)


state 184

    (43) llam_varsB -> LBRACE CTEENT RBRACE LBRACE . CTEENT RBRACE

    CTEENT          shift and go to state 195


state 185

    (80) ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY . bloque RCURLY
    (28) bloque -> . bloqueB bloqueBB
    (29) bloqueB -> . asignacion
    (30) bloqueB -> . ciclo_para_cada
    (31) bloqueB -> . ciclo_mientras
    (32) bloqueB -> . condicion
    (33) bloqueB -> . escribir
    (34) bloqueB -> . leer
    (35) bloqueB -> . dec_vars
    (36) bloqueB -> . llam_func
    (37) bloqueB -> . regresar
    (40) asignacion -> . llam_vars ASSIGN expresion
    (77) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (80) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (81) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (84) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (89) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (73) llam_func -> . ID LPAREN llam_params RPAREN
    (93) regresar -> . RETURN LPAREN expresion RPAREN
    (41) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 58
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    ESCRITURA       shift and go to state 62
    LECTURA         shift and go to state 63
    VAR             shift and go to state 9
    ID              shift and go to state 59
    RETURN          shift and go to state 64

    bloque                         shift and go to state 196
    bloqueB                        shift and go to state 47
    asignacion                     shift and go to state 48
    ciclo_para_cada                shift and go to state 49
    ciclo_mientras                 shift and go to state 50
    condicion                      shift and go to state 51
    escribir                       shift and go to state 52
    leer                           shift and go to state 53
    dec_vars                       shift and go to state 54
    llam_func                      shift and go to state 55
    regresar                       shift and go to state 56
    llam_vars                      shift and go to state 57

state 186

    (81) condicion -> IF LPAREN expresion RPAREN LCURLY . bloque RCURLY condicionB
    (28) bloque -> . bloqueB bloqueBB
    (29) bloqueB -> . asignacion
    (30) bloqueB -> . ciclo_para_cada
    (31) bloqueB -> . ciclo_mientras
    (32) bloqueB -> . condicion
    (33) bloqueB -> . escribir
    (34) bloqueB -> . leer
    (35) bloqueB -> . dec_vars
    (36) bloqueB -> . llam_func
    (37) bloqueB -> . regresar
    (40) asignacion -> . llam_vars ASSIGN expresion
    (77) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (80) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (81) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (84) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (89) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (73) llam_func -> . ID LPAREN llam_params RPAREN
    (93) regresar -> . RETURN LPAREN expresion RPAREN
    (41) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 58
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    ESCRITURA       shift and go to state 62
    LECTURA         shift and go to state 63
    VAR             shift and go to state 9
    ID              shift and go to state 59
    RETURN          shift and go to state 64

    bloque                         shift and go to state 197
    bloqueB                        shift and go to state 47
    asignacion                     shift and go to state 48
    ciclo_para_cada                shift and go to state 49
    ciclo_mientras                 shift and go to state 50
    condicion                      shift and go to state 51
    escribir                       shift and go to state 52
    leer                           shift and go to state 53
    dec_vars                       shift and go to state 54
    llam_func                      shift and go to state 55
    regresar                       shift and go to state 56
    llam_vars                      shift and go to state 57

state 187

    (87) escribirBB -> COMMA escribirB .

    RPAREN          reduce using rule 87 (escribirBB -> COMMA escribirB .)


state 188

    (91) leerII -> COMMA ID .

    RPAREN          reduce using rule 91 (leerII -> COMMA ID .)


state 189

    (23) dec_params -> ID punto_semantico_11 COLON tipo punto_semantico_5 . punto_semantico_12 dec_paramsB
    (107) punto_semantico_12 -> .

    COMMA           reduce using rule 107 (punto_semantico_12 -> .)
    RPAREN          reduce using rule 107 (punto_semantico_12 -> .)

    punto_semantico_12             shift and go to state 198

state 190

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 . LCURLY bloque RCURLY punto_semantico_14

    LCURLY          shift and go to state 199


state 191

    (12) dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT . punto_semantico_7 RBRACE
    (102) punto_semantico_7 -> .

    RBRACE          reduce using rule 102 (punto_semantico_7 -> .)

    punto_semantico_7              shift and go to state 200

state 192

    (77) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB . RPAREN LCURLY bloque RCURLY

    RPAREN          shift and go to state 201


state 193

    (78) ciclo_para_cadaB -> CONFORME . expresion
    (45) expresion -> . peta_exp expresionB
    (48) peta_exp -> . tera_exp peta_expB
    (52) tera_exp -> . mega_exp tera_expB
    (60) mega_exp -> . kilo_exp mega_expB
    (64) kilo_exp -> . factor kilo_expB
    (68) factor -> . LPAREN expresion RPAREN
    (69) factor -> . llam_vars
    (70) factor -> . llam_func
    (71) factor -> . CTEENT
    (72) factor -> . CTEDECI
    (41) llam_vars -> . ID llam_varsB
    (73) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 101
    CTEENT          shift and go to state 103
    CTEDECI         shift and go to state 104
    ID              shift and go to state 105

    expresion                      shift and go to state 202
    peta_exp                       shift and go to state 96
    tera_exp                       shift and go to state 97
    mega_exp                       shift and go to state 98
    kilo_exp                       shift and go to state 99
    factor                         shift and go to state 100
    llam_vars                      shift and go to state 94
    llam_func                      shift and go to state 102

state 194

    (79) ciclo_para_cadaB -> empty .

    RPAREN          reduce using rule 79 (ciclo_para_cadaB -> empty .)


state 195

    (43) llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT . RBRACE

    RBRACE          shift and go to state 203


state 196

    (80) ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque . RCURLY

    RCURLY          shift and go to state 204


state 197

    (81) condicion -> IF LPAREN expresion RPAREN LCURLY bloque . RCURLY condicionB

    RCURLY          shift and go to state 205


state 198

    (23) dec_params -> ID punto_semantico_11 COLON tipo punto_semantico_5 punto_semantico_12 . dec_paramsB
    (24) dec_paramsB -> . COMMA dec_params
    (25) dec_paramsB -> . empty
    (95) empty -> .

    COMMA           shift and go to state 207
    RPAREN          reduce using rule 95 (empty -> .)

    dec_paramsB                    shift and go to state 206
    empty                          shift and go to state 208

state 199

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY . bloque RCURLY punto_semantico_14
    (28) bloque -> . bloqueB bloqueBB
    (29) bloqueB -> . asignacion
    (30) bloqueB -> . ciclo_para_cada
    (31) bloqueB -> . ciclo_mientras
    (32) bloqueB -> . condicion
    (33) bloqueB -> . escribir
    (34) bloqueB -> . leer
    (35) bloqueB -> . dec_vars
    (36) bloqueB -> . llam_func
    (37) bloqueB -> . regresar
    (40) asignacion -> . llam_vars ASSIGN expresion
    (77) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (80) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (81) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (84) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (89) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (73) llam_func -> . ID LPAREN llam_params RPAREN
    (93) regresar -> . RETURN LPAREN expresion RPAREN
    (41) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 58
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    ESCRITURA       shift and go to state 62
    LECTURA         shift and go to state 63
    VAR             shift and go to state 9
    ID              shift and go to state 59
    RETURN          shift and go to state 64

    bloque                         shift and go to state 209
    bloqueB                        shift and go to state 47
    asignacion                     shift and go to state 48
    ciclo_para_cada                shift and go to state 49
    ciclo_mientras                 shift and go to state 50
    condicion                      shift and go to state 51
    escribir                       shift and go to state 52
    leer                           shift and go to state 53
    dec_vars                       shift and go to state 54
    llam_func                      shift and go to state 55
    regresar                       shift and go to state 56
    llam_vars                      shift and go to state 57

state 200

    (12) dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 . RBRACE

    RBRACE          shift and go to state 210


state 201

    (77) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN . LCURLY bloque RCURLY

    LCURLY          shift and go to state 211


state 202

    (78) ciclo_para_cadaB -> CONFORME expresion .

    RPAREN          reduce using rule 78 (ciclo_para_cadaB -> CONFORME expresion .)


state 203

    (43) llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .

    ASSIGN          reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    TIMES           reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    DIVIDE          reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    PLUS            reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    MINUS           reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    LT              reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    GT              reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    LTE             reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    GTE             reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    EQUAL           reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    NEQUAL          reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    AND             reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    OR              reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    FOR             reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    WHILE           reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    IF              reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    ESCRITURA       reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    LECTURA         reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    VAR             reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    ID              reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    RETURN          reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    RCURLY          reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    COMMA           reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    RPAREN          reduce using rule 43 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)


state 204

    (80) ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .

    FOR             reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    WHILE           reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    IF              reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    ESCRITURA       reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    LECTURA         reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    VAR             reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    ID              reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    RETURN          reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    RCURLY          reduce using rule 80 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)


state 205

    (81) condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY . condicionB
    (82) condicionB -> . ELSE LCURLY bloque RCURLY
    (83) condicionB -> . empty
    (95) empty -> .

    ELSE            shift and go to state 213
    FOR             reduce using rule 95 (empty -> .)
    WHILE           reduce using rule 95 (empty -> .)
    IF              reduce using rule 95 (empty -> .)
    ESCRITURA       reduce using rule 95 (empty -> .)
    LECTURA         reduce using rule 95 (empty -> .)
    VAR             reduce using rule 95 (empty -> .)
    ID              reduce using rule 95 (empty -> .)
    RETURN          reduce using rule 95 (empty -> .)
    RCURLY          reduce using rule 95 (empty -> .)

    condicionB                     shift and go to state 212
    empty                          shift and go to state 214

state 206

    (23) dec_params -> ID punto_semantico_11 COLON tipo punto_semantico_5 punto_semantico_12 dec_paramsB .

    RPAREN          reduce using rule 23 (dec_params -> ID punto_semantico_11 COLON tipo punto_semantico_5 punto_semantico_12 dec_paramsB .)


state 207

    (24) dec_paramsB -> COMMA . dec_params
    (23) dec_params -> . ID punto_semantico_11 COLON tipo punto_semantico_5 punto_semantico_12 dec_paramsB

    ID              shift and go to state 65

    dec_params                     shift and go to state 215

state 208

    (25) dec_paramsB -> empty .

    RPAREN          reduce using rule 25 (dec_paramsB -> empty .)


state 209

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque . RCURLY punto_semantico_14

    RCURLY          shift and go to state 216


state 210

    (12) dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .

    VAR             reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    FUNCION         reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    FOR             reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    WHILE           reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    IF              reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    ESCRITURA       reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    LECTURA         reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    ID              reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    RETURN          reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)
    RCURLY          reduce using rule 12 (dec_varsB -> LBRACE CTEENT punto_semantico_6 RBRACE LBRACE CTEENT punto_semantico_7 RBRACE .)


state 211

    (77) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY . bloque RCURLY
    (28) bloque -> . bloqueB bloqueBB
    (29) bloqueB -> . asignacion
    (30) bloqueB -> . ciclo_para_cada
    (31) bloqueB -> . ciclo_mientras
    (32) bloqueB -> . condicion
    (33) bloqueB -> . escribir
    (34) bloqueB -> . leer
    (35) bloqueB -> . dec_vars
    (36) bloqueB -> . llam_func
    (37) bloqueB -> . regresar
    (40) asignacion -> . llam_vars ASSIGN expresion
    (77) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (80) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (81) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (84) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (89) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (73) llam_func -> . ID LPAREN llam_params RPAREN
    (93) regresar -> . RETURN LPAREN expresion RPAREN
    (41) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 58
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    ESCRITURA       shift and go to state 62
    LECTURA         shift and go to state 63
    VAR             shift and go to state 9
    ID              shift and go to state 59
    RETURN          shift and go to state 64

    bloque                         shift and go to state 217
    bloqueB                        shift and go to state 47
    asignacion                     shift and go to state 48
    ciclo_para_cada                shift and go to state 49
    ciclo_mientras                 shift and go to state 50
    condicion                      shift and go to state 51
    escribir                       shift and go to state 52
    leer                           shift and go to state 53
    dec_vars                       shift and go to state 54
    llam_func                      shift and go to state 55
    regresar                       shift and go to state 56
    llam_vars                      shift and go to state 57

state 212

    (81) condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .

    FOR             reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    WHILE           reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    IF              reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    ESCRITURA       reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    LECTURA         reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    VAR             reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    ID              reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    RETURN          reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    RCURLY          reduce using rule 81 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)


state 213

    (82) condicionB -> ELSE . LCURLY bloque RCURLY

    LCURLY          shift and go to state 218


state 214

    (83) condicionB -> empty .

    FOR             reduce using rule 83 (condicionB -> empty .)
    WHILE           reduce using rule 83 (condicionB -> empty .)
    IF              reduce using rule 83 (condicionB -> empty .)
    ESCRITURA       reduce using rule 83 (condicionB -> empty .)
    LECTURA         reduce using rule 83 (condicionB -> empty .)
    VAR             reduce using rule 83 (condicionB -> empty .)
    ID              reduce using rule 83 (condicionB -> empty .)
    RETURN          reduce using rule 83 (condicionB -> empty .)
    RCURLY          reduce using rule 83 (condicionB -> empty .)


state 215

    (24) dec_paramsB -> COMMA dec_params .

    RPAREN          reduce using rule 24 (dec_paramsB -> COMMA dec_params .)


state 216

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY . punto_semantico_14
    (109) punto_semantico_14 -> .

    FUNCION         reduce using rule 109 (punto_semantico_14 -> .)
    MAIN            reduce using rule 109 (punto_semantico_14 -> .)

    punto_semantico_14             shift and go to state 219

state 217

    (77) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque . RCURLY

    RCURLY          shift and go to state 220


state 218

    (82) condicionB -> ELSE LCURLY . bloque RCURLY
    (28) bloque -> . bloqueB bloqueBB
    (29) bloqueB -> . asignacion
    (30) bloqueB -> . ciclo_para_cada
    (31) bloqueB -> . ciclo_mientras
    (32) bloqueB -> . condicion
    (33) bloqueB -> . escribir
    (34) bloqueB -> . leer
    (35) bloqueB -> . dec_vars
    (36) bloqueB -> . llam_func
    (37) bloqueB -> . regresar
    (40) asignacion -> . llam_vars ASSIGN expresion
    (77) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (80) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (81) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (84) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (89) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR punto_semantico_3 dec_varsI COLON tipo punto_semantico_5 dec_varsB punto_semantico_8 dec_varsBB
    (73) llam_func -> . ID LPAREN llam_params RPAREN
    (93) regresar -> . RETURN LPAREN expresion RPAREN
    (41) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 58
    WHILE           shift and go to state 60
    IF              shift and go to state 61
    ESCRITURA       shift and go to state 62
    LECTURA         shift and go to state 63
    VAR             shift and go to state 9
    ID              shift and go to state 59
    RETURN          shift and go to state 64

    bloque                         shift and go to state 221
    bloqueB                        shift and go to state 47
    asignacion                     shift and go to state 48
    ciclo_para_cada                shift and go to state 49
    ciclo_mientras                 shift and go to state 50
    condicion                      shift and go to state 51
    escribir                       shift and go to state 52
    leer                           shift and go to state 53
    dec_vars                       shift and go to state 54
    llam_func                      shift and go to state 55
    regresar                       shift and go to state 56
    llam_vars                      shift and go to state 57

state 219

    (20) dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14 .

    FUNCION         reduce using rule 20 (dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14 .)
    MAIN            reduce using rule 20 (dec_func -> FUNCION punto_semantico_9 ID punto_semantico_10 LPAREN punto_semantico_3 dec_funcB RPAREN COLON tipo_func punto_semantico_13 LCURLY bloque RCURLY punto_semantico_14 .)


state 220

    (77) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .

    FOR             reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    WHILE           reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    IF              reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    ESCRITURA       reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    LECTURA         reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    VAR             reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    ID              reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    RETURN          reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    RCURLY          reduce using rule 77 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)


state 221

    (82) condicionB -> ELSE LCURLY bloque . RCURLY

    RCURLY          shift and go to state 222


state 222

    (82) condicionB -> ELSE LCURLY bloque RCURLY .

    FOR             reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)
    WHILE           reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)
    IF              reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)
    ESCRITURA       reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)
    LECTURA         reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)
    VAR             reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)
    ID              reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)
    RETURN          reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)
    RCURLY          reduce using rule 82 (condicionB -> ELSE LCURLY bloque RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 69 resolved as shift
