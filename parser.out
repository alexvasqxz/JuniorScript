Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMENTARIO
    CTELETRA
    FALSE
    TRUE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA ID programaB programaC inicio
Rule 2     programaB -> dec_vars
Rule 3     programaB -> empty
Rule 4     programaC -> dec_func programaCC
Rule 5     programaCC -> programaC
Rule 6     programaCC -> empty
Rule 7     dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB
Rule 8     dec_varsI -> ID dec_varsII
Rule 9     dec_varsII -> COMMA ID
Rule 10    dec_varsII -> empty
Rule 11    dec_varsB -> LBRACE CTEENT RBRACE
Rule 12    dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE
Rule 13    dec_varsB -> empty
Rule 14    dec_varsBB -> dec_vars
Rule 15    dec_varsBB -> empty
Rule 16    tipo -> TIPOENT
Rule 17    tipo -> TIPODEC
Rule 18    tipo -> TIPOLETRA
Rule 19    tipo -> TIPOLOGI
Rule 20    dec_func -> FUNCION ID LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY
Rule 21    dec_params -> ID COLON tipo dec_paramsB
Rule 22    dec_paramsB -> COMMA dec_params
Rule 23    dec_paramsB -> empty
Rule 24    tipo_func -> tipo
Rule 25    tipo_func -> VOID
Rule 26    bloque -> bloqueB bloqueBB
Rule 27    bloqueB -> asignacion
Rule 28    bloqueB -> ciclo_para_cada
Rule 29    bloqueB -> ciclo_mientras
Rule 30    bloqueB -> condicion
Rule 31    bloqueB -> escribir
Rule 32    bloqueB -> leer
Rule 33    bloqueB -> dec_vars
Rule 34    bloqueB -> llam_func
Rule 35    bloqueB -> regresar
Rule 36    bloqueBB -> bloqueB bloqueBB
Rule 37    bloqueBB -> empty
Rule 38    asignacion -> llam_vars ASSIGN expresion
Rule 39    llam_vars -> ID llam_varsB
Rule 40    llam_varsB -> LBRACE CTEENT RBRACE
Rule 41    llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE
Rule 42    llam_varsB -> empty
Rule 43    expresion -> peta_exp expresionB
Rule 44    expresionB -> ASSIGN expresion
Rule 45    expresionB -> empty
Rule 46    peta_exp -> tera_exp peta_expB
Rule 47    peta_expB -> AND peta_exp
Rule 48    peta_expB -> OR peta_exp
Rule 49    peta_expB -> empty
Rule 50    tera_exp -> mega_exp tera_expB
Rule 51    tera_expB -> LT tera_exp
Rule 52    tera_expB -> GT tera_exp
Rule 53    tera_expB -> LTE tera_exp
Rule 54    tera_expB -> GTE tera_exp
Rule 55    tera_expB -> EQUAL tera_exp
Rule 56    tera_expB -> NEQUAL tera_exp
Rule 57    tera_expB -> empty
Rule 58    mega_exp -> kilo_exp mega_expB
Rule 59    mega_expB -> PLUS mega_exp
Rule 60    mega_expB -> MINUS mega_exp
Rule 61    mega_expB -> empty
Rule 62    kilo_exp -> factor kilo_expB
Rule 63    kilo_expB -> TIMES kilo_exp
Rule 64    kilo_expB -> DIVIDE kilo_exp
Rule 65    kilo_expB -> empty
Rule 66    factor -> LPAREN expresion RPAREN
Rule 67    factor -> llam_vars
Rule 68    factor -> llam_func
Rule 69    factor -> CTEENT
Rule 70    factor -> CTEDECI
Rule 71    llam_func -> ID LPAREN llam_params RPAREN
Rule 72    llam_params -> expresion llam_paramsB
Rule 73    llam_paramsB -> COMMA llam_params
Rule 74    llam_paramsB -> empty
Rule 75    ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
Rule 76    ciclo_para_cadaB -> CONFORME expresion
Rule 77    ciclo_para_cadaB -> empty
Rule 78    ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
Rule 79    condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
Rule 80    condicionB -> ELSE LCURLY bloque RCURLY
Rule 81    condicionB -> empty
Rule 82    escribir -> ESCRITURA LPAREN escribirB RPAREN
Rule 83    escribirB -> expresion escribirBB
Rule 84    escribirB -> CTEFRASE escribirBB
Rule 85    escribirBB -> COMMA escribirB
Rule 86    escribirBB -> empty
Rule 87    leer -> LECTURA LPAREN leerI RPAREN
Rule 88    leerI -> ID leerII
Rule 89    leerII -> COMMA ID
Rule 90    leerII -> empty
Rule 91    regresar -> RETURN LPAREN expresion RPAREN
Rule 92    inicio -> MAIN LPAREN RPAREN LCURLY bloque RCURLY
Rule 93    empty -> <empty>

Terminals, with rules where they appear

AND                  : 47
ASSIGN               : 38 44
COLON                : 7 20 21
COMENTARIO           : 
COMMA                : 9 22 73 85 89
CONFORME             : 76
CTEDECI              : 70
CTEENT               : 11 12 12 40 41 41 69
CTEFRASE             : 84
CTELETRA             : 
DIVIDE               : 64
ELSE                 : 80
EQUAL                : 55
ESCRITURA            : 82
FALSE                : 
FOR                  : 75
FUNCION              : 20
GT                   : 52
GTE                  : 54
ID                   : 1 8 9 20 21 39 71 75 75 88 89
IF                   : 79
IN                   : 75
LBRACE               : 11 12 12 40 41 41
LCURLY               : 20 75 78 79 80 92
LECTURA              : 87
LPAREN               : 20 66 71 75 78 79 82 87 91 92
LT                   : 51
LTE                  : 53
MAIN                 : 92
MINUS                : 60
NEQUAL               : 56
OR                   : 48
PLUS                 : 59
PROGRAMA             : 1
RBRACE               : 11 12 12 40 41 41
RCURLY               : 20 75 78 79 80 92
RETURN               : 91
RPAREN               : 20 66 71 75 78 79 82 87 91 92
TIMES                : 63
TIPODEC              : 17
TIPOENT              : 16
TIPOLETRA            : 18
TIPOLOGI             : 19
TRUE                 : 
VAR                  : 7
VOID                 : 25
WHILE                : 78
error                : 

Nonterminals, with rules where they appear

asignacion           : 27
bloque               : 20 75 78 79 80 92
bloqueB              : 26 36
bloqueBB             : 26 36
ciclo_mientras       : 29
ciclo_para_cada      : 28
ciclo_para_cadaB     : 75
condicion            : 30
condicionB           : 79
dec_func             : 4
dec_params           : 20 22
dec_paramsB          : 21
dec_vars             : 2 14 33
dec_varsB            : 7
dec_varsBB           : 7
dec_varsI            : 7
dec_varsII           : 8
empty                : 3 6 10 13 15 23 37 42 45 49 57 61 65 74 77 81 86 90
escribir             : 31
escribirB            : 82 85
escribirBB           : 83 84
expresion            : 38 44 66 72 76 78 79 83 91
expresionB           : 43
factor               : 62
inicio               : 1
kilo_exp             : 58 63 64
kilo_expB            : 62
leer                 : 32
leerI                : 87
leerII               : 88
llam_func            : 34 68
llam_params          : 71 73
llam_paramsB         : 72
llam_vars            : 38 67
llam_varsB           : 39
mega_exp             : 50 59 60
mega_expB            : 58
peta_exp             : 43 47 48
peta_expB            : 46
programa             : 0
programaB            : 1
programaC            : 1 5
programaCC           : 4
regresar             : 35
tera_exp             : 46 51 52 53 54 55 56
tera_expB            : 50
tipo                 : 7 21 24
tipo_func            : 20

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA ID programaB programaC inicio

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . ID programaB programaC inicio

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAMA ID . programaB programaC inicio
    (2) programaB -> . dec_vars
    (3) programaB -> . empty
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (93) empty -> .

    VAR             shift and go to state 7
    FUNCION         reduce using rule 93 (empty -> .)

    programaB                      shift and go to state 4
    dec_vars                       shift and go to state 5
    empty                          shift and go to state 6

state 4

    (1) programa -> PROGRAMA ID programaB . programaC inicio
    (4) programaC -> . dec_func programaCC
    (20) dec_func -> . FUNCION ID LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY

    FUNCION         shift and go to state 10

    programaC                      shift and go to state 8
    dec_func                       shift and go to state 9

state 5

    (2) programaB -> dec_vars .

    FUNCION         reduce using rule 2 (programaB -> dec_vars .)


state 6

    (3) programaB -> empty .

    FUNCION         reduce using rule 3 (programaB -> empty .)


state 7

    (7) dec_vars -> VAR . dec_varsI COLON tipo dec_varsB dec_varsBB
    (8) dec_varsI -> . ID dec_varsII

    ID              shift and go to state 12

    dec_varsI                      shift and go to state 11

state 8

    (1) programa -> PROGRAMA ID programaB programaC . inicio
    (92) inicio -> . MAIN LPAREN RPAREN LCURLY bloque RCURLY

    MAIN            shift and go to state 14

    inicio                         shift and go to state 13

state 9

    (4) programaC -> dec_func . programaCC
    (5) programaCC -> . programaC
    (6) programaCC -> . empty
    (4) programaC -> . dec_func programaCC
    (93) empty -> .
    (20) dec_func -> . FUNCION ID LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY

    MAIN            reduce using rule 93 (empty -> .)
    FUNCION         shift and go to state 10

    dec_func                       shift and go to state 9
    programaCC                     shift and go to state 15
    programaC                      shift and go to state 16
    empty                          shift and go to state 17

state 10

    (20) dec_func -> FUNCION . ID LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY

    ID              shift and go to state 18


state 11

    (7) dec_vars -> VAR dec_varsI . COLON tipo dec_varsB dec_varsBB

    COLON           shift and go to state 19


state 12

    (8) dec_varsI -> ID . dec_varsII
    (9) dec_varsII -> . COMMA ID
    (10) dec_varsII -> . empty
    (93) empty -> .

    COMMA           shift and go to state 21
    COLON           reduce using rule 93 (empty -> .)

    dec_varsII                     shift and go to state 20
    empty                          shift and go to state 22

state 13

    (1) programa -> PROGRAMA ID programaB programaC inicio .

    $end            reduce using rule 1 (programa -> PROGRAMA ID programaB programaC inicio .)


state 14

    (92) inicio -> MAIN . LPAREN RPAREN LCURLY bloque RCURLY

    LPAREN          shift and go to state 23


state 15

    (4) programaC -> dec_func programaCC .

    MAIN            reduce using rule 4 (programaC -> dec_func programaCC .)


state 16

    (5) programaCC -> programaC .

    MAIN            reduce using rule 5 (programaCC -> programaC .)


state 17

    (6) programaCC -> empty .

    MAIN            reduce using rule 6 (programaCC -> empty .)


state 18

    (20) dec_func -> FUNCION ID . LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY

    LPAREN          shift and go to state 24


state 19

    (7) dec_vars -> VAR dec_varsI COLON . tipo dec_varsB dec_varsBB
    (16) tipo -> . TIPOENT
    (17) tipo -> . TIPODEC
    (18) tipo -> . TIPOLETRA
    (19) tipo -> . TIPOLOGI

    TIPOENT         shift and go to state 26
    TIPODEC         shift and go to state 27
    TIPOLETRA       shift and go to state 28
    TIPOLOGI        shift and go to state 29

    tipo                           shift and go to state 25

state 20

    (8) dec_varsI -> ID dec_varsII .

    COLON           reduce using rule 8 (dec_varsI -> ID dec_varsII .)


state 21

    (9) dec_varsII -> COMMA . ID

    ID              shift and go to state 30


state 22

    (10) dec_varsII -> empty .

    COLON           reduce using rule 10 (dec_varsII -> empty .)


state 23

    (92) inicio -> MAIN LPAREN . RPAREN LCURLY bloque RCURLY

    RPAREN          shift and go to state 31


state 24

    (20) dec_func -> FUNCION ID LPAREN . dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY
    (21) dec_params -> . ID COLON tipo dec_paramsB

    ID              shift and go to state 32

    dec_params                     shift and go to state 33

state 25

    (7) dec_vars -> VAR dec_varsI COLON tipo . dec_varsB dec_varsBB
    (11) dec_varsB -> . LBRACE CTEENT RBRACE
    (12) dec_varsB -> . LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE
    (13) dec_varsB -> . empty
    (93) empty -> .

    LBRACE          shift and go to state 35
    VAR             reduce using rule 93 (empty -> .)
    FUNCION         reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)

    dec_varsB                      shift and go to state 34
    empty                          shift and go to state 36

state 26

    (16) tipo -> TIPOENT .

    LBRACE          reduce using rule 16 (tipo -> TIPOENT .)
    VAR             reduce using rule 16 (tipo -> TIPOENT .)
    FUNCION         reduce using rule 16 (tipo -> TIPOENT .)
    FOR             reduce using rule 16 (tipo -> TIPOENT .)
    WHILE           reduce using rule 16 (tipo -> TIPOENT .)
    IF              reduce using rule 16 (tipo -> TIPOENT .)
    ESCRITURA       reduce using rule 16 (tipo -> TIPOENT .)
    LECTURA         reduce using rule 16 (tipo -> TIPOENT .)
    ID              reduce using rule 16 (tipo -> TIPOENT .)
    RETURN          reduce using rule 16 (tipo -> TIPOENT .)
    RCURLY          reduce using rule 16 (tipo -> TIPOENT .)
    COMMA           reduce using rule 16 (tipo -> TIPOENT .)
    RPAREN          reduce using rule 16 (tipo -> TIPOENT .)
    LCURLY          reduce using rule 16 (tipo -> TIPOENT .)


state 27

    (17) tipo -> TIPODEC .

    LBRACE          reduce using rule 17 (tipo -> TIPODEC .)
    VAR             reduce using rule 17 (tipo -> TIPODEC .)
    FUNCION         reduce using rule 17 (tipo -> TIPODEC .)
    FOR             reduce using rule 17 (tipo -> TIPODEC .)
    WHILE           reduce using rule 17 (tipo -> TIPODEC .)
    IF              reduce using rule 17 (tipo -> TIPODEC .)
    ESCRITURA       reduce using rule 17 (tipo -> TIPODEC .)
    LECTURA         reduce using rule 17 (tipo -> TIPODEC .)
    ID              reduce using rule 17 (tipo -> TIPODEC .)
    RETURN          reduce using rule 17 (tipo -> TIPODEC .)
    RCURLY          reduce using rule 17 (tipo -> TIPODEC .)
    COMMA           reduce using rule 17 (tipo -> TIPODEC .)
    RPAREN          reduce using rule 17 (tipo -> TIPODEC .)
    LCURLY          reduce using rule 17 (tipo -> TIPODEC .)


state 28

    (18) tipo -> TIPOLETRA .

    LBRACE          reduce using rule 18 (tipo -> TIPOLETRA .)
    VAR             reduce using rule 18 (tipo -> TIPOLETRA .)
    FUNCION         reduce using rule 18 (tipo -> TIPOLETRA .)
    FOR             reduce using rule 18 (tipo -> TIPOLETRA .)
    WHILE           reduce using rule 18 (tipo -> TIPOLETRA .)
    IF              reduce using rule 18 (tipo -> TIPOLETRA .)
    ESCRITURA       reduce using rule 18 (tipo -> TIPOLETRA .)
    LECTURA         reduce using rule 18 (tipo -> TIPOLETRA .)
    ID              reduce using rule 18 (tipo -> TIPOLETRA .)
    RETURN          reduce using rule 18 (tipo -> TIPOLETRA .)
    RCURLY          reduce using rule 18 (tipo -> TIPOLETRA .)
    COMMA           reduce using rule 18 (tipo -> TIPOLETRA .)
    RPAREN          reduce using rule 18 (tipo -> TIPOLETRA .)
    LCURLY          reduce using rule 18 (tipo -> TIPOLETRA .)


state 29

    (19) tipo -> TIPOLOGI .

    LBRACE          reduce using rule 19 (tipo -> TIPOLOGI .)
    VAR             reduce using rule 19 (tipo -> TIPOLOGI .)
    FUNCION         reduce using rule 19 (tipo -> TIPOLOGI .)
    FOR             reduce using rule 19 (tipo -> TIPOLOGI .)
    WHILE           reduce using rule 19 (tipo -> TIPOLOGI .)
    IF              reduce using rule 19 (tipo -> TIPOLOGI .)
    ESCRITURA       reduce using rule 19 (tipo -> TIPOLOGI .)
    LECTURA         reduce using rule 19 (tipo -> TIPOLOGI .)
    ID              reduce using rule 19 (tipo -> TIPOLOGI .)
    RETURN          reduce using rule 19 (tipo -> TIPOLOGI .)
    RCURLY          reduce using rule 19 (tipo -> TIPOLOGI .)
    COMMA           reduce using rule 19 (tipo -> TIPOLOGI .)
    RPAREN          reduce using rule 19 (tipo -> TIPOLOGI .)
    LCURLY          reduce using rule 19 (tipo -> TIPOLOGI .)


state 30

    (9) dec_varsII -> COMMA ID .

    COLON           reduce using rule 9 (dec_varsII -> COMMA ID .)


state 31

    (92) inicio -> MAIN LPAREN RPAREN . LCURLY bloque RCURLY

    LCURLY          shift and go to state 37


state 32

    (21) dec_params -> ID . COLON tipo dec_paramsB

    COLON           shift and go to state 38


state 33

    (20) dec_func -> FUNCION ID LPAREN dec_params . RPAREN COLON tipo_func LCURLY bloque RCURLY

    RPAREN          shift and go to state 39


state 34

    (7) dec_vars -> VAR dec_varsI COLON tipo dec_varsB . dec_varsBB
    (14) dec_varsBB -> . dec_vars
    (15) dec_varsBB -> . empty
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (93) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 7
    FUNCION         reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)

  ! VAR             [ reduce using rule 93 (empty -> .) ]

    dec_varsBB                     shift and go to state 40
    dec_vars                       shift and go to state 41
    empty                          shift and go to state 42

state 35

    (11) dec_varsB -> LBRACE . CTEENT RBRACE
    (12) dec_varsB -> LBRACE . CTEENT RBRACE LBRACE CTEENT RBRACE

    CTEENT          shift and go to state 43


state 36

    (13) dec_varsB -> empty .

    VAR             reduce using rule 13 (dec_varsB -> empty .)
    FUNCION         reduce using rule 13 (dec_varsB -> empty .)
    FOR             reduce using rule 13 (dec_varsB -> empty .)
    WHILE           reduce using rule 13 (dec_varsB -> empty .)
    IF              reduce using rule 13 (dec_varsB -> empty .)
    ESCRITURA       reduce using rule 13 (dec_varsB -> empty .)
    LECTURA         reduce using rule 13 (dec_varsB -> empty .)
    ID              reduce using rule 13 (dec_varsB -> empty .)
    RETURN          reduce using rule 13 (dec_varsB -> empty .)
    RCURLY          reduce using rule 13 (dec_varsB -> empty .)


state 37

    (92) inicio -> MAIN LPAREN RPAREN LCURLY . bloque RCURLY
    (26) bloque -> . bloqueB bloqueBB
    (27) bloqueB -> . asignacion
    (28) bloqueB -> . ciclo_para_cada
    (29) bloqueB -> . ciclo_mientras
    (30) bloqueB -> . condicion
    (31) bloqueB -> . escribir
    (32) bloqueB -> . leer
    (33) bloqueB -> . dec_vars
    (34) bloqueB -> . llam_func
    (35) bloqueB -> . regresar
    (38) asignacion -> . llam_vars ASSIGN expresion
    (75) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (79) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (82) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (87) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (71) llam_func -> . ID LPAREN llam_params RPAREN
    (91) regresar -> . RETURN LPAREN expresion RPAREN
    (39) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 56
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ESCRITURA       shift and go to state 60
    LECTURA         shift and go to state 61
    VAR             shift and go to state 7
    ID              shift and go to state 57
    RETURN          shift and go to state 62

    bloque                         shift and go to state 44
    bloqueB                        shift and go to state 45
    asignacion                     shift and go to state 46
    ciclo_para_cada                shift and go to state 47
    ciclo_mientras                 shift and go to state 48
    condicion                      shift and go to state 49
    escribir                       shift and go to state 50
    leer                           shift and go to state 51
    dec_vars                       shift and go to state 52
    llam_func                      shift and go to state 53
    regresar                       shift and go to state 54
    llam_vars                      shift and go to state 55

state 38

    (21) dec_params -> ID COLON . tipo dec_paramsB
    (16) tipo -> . TIPOENT
    (17) tipo -> . TIPODEC
    (18) tipo -> . TIPOLETRA
    (19) tipo -> . TIPOLOGI

    TIPOENT         shift and go to state 26
    TIPODEC         shift and go to state 27
    TIPOLETRA       shift and go to state 28
    TIPOLOGI        shift and go to state 29

    tipo                           shift and go to state 63

state 39

    (20) dec_func -> FUNCION ID LPAREN dec_params RPAREN . COLON tipo_func LCURLY bloque RCURLY

    COLON           shift and go to state 64


state 40

    (7) dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .

    FUNCION         reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    FOR             reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    WHILE           reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    IF              reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    ESCRITURA       reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    LECTURA         reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    VAR             reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    ID              reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    RETURN          reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)
    RCURLY          reduce using rule 7 (dec_vars -> VAR dec_varsI COLON tipo dec_varsB dec_varsBB .)


state 41

    (14) dec_varsBB -> dec_vars .

    FUNCION         reduce using rule 14 (dec_varsBB -> dec_vars .)
    FOR             reduce using rule 14 (dec_varsBB -> dec_vars .)
    WHILE           reduce using rule 14 (dec_varsBB -> dec_vars .)
    IF              reduce using rule 14 (dec_varsBB -> dec_vars .)
    ESCRITURA       reduce using rule 14 (dec_varsBB -> dec_vars .)
    LECTURA         reduce using rule 14 (dec_varsBB -> dec_vars .)
    VAR             reduce using rule 14 (dec_varsBB -> dec_vars .)
    ID              reduce using rule 14 (dec_varsBB -> dec_vars .)
    RETURN          reduce using rule 14 (dec_varsBB -> dec_vars .)
    RCURLY          reduce using rule 14 (dec_varsBB -> dec_vars .)


state 42

    (15) dec_varsBB -> empty .

    FUNCION         reduce using rule 15 (dec_varsBB -> empty .)
    FOR             reduce using rule 15 (dec_varsBB -> empty .)
    WHILE           reduce using rule 15 (dec_varsBB -> empty .)
    IF              reduce using rule 15 (dec_varsBB -> empty .)
    ESCRITURA       reduce using rule 15 (dec_varsBB -> empty .)
    LECTURA         reduce using rule 15 (dec_varsBB -> empty .)
    VAR             reduce using rule 15 (dec_varsBB -> empty .)
    ID              reduce using rule 15 (dec_varsBB -> empty .)
    RETURN          reduce using rule 15 (dec_varsBB -> empty .)
    RCURLY          reduce using rule 15 (dec_varsBB -> empty .)


state 43

    (11) dec_varsB -> LBRACE CTEENT . RBRACE
    (12) dec_varsB -> LBRACE CTEENT . RBRACE LBRACE CTEENT RBRACE

    RBRACE          shift and go to state 65


state 44

    (92) inicio -> MAIN LPAREN RPAREN LCURLY bloque . RCURLY

    RCURLY          shift and go to state 66


state 45

    (26) bloque -> bloqueB . bloqueBB
    (36) bloqueBB -> . bloqueB bloqueBB
    (37) bloqueBB -> . empty
    (27) bloqueB -> . asignacion
    (28) bloqueB -> . ciclo_para_cada
    (29) bloqueB -> . ciclo_mientras
    (30) bloqueB -> . condicion
    (31) bloqueB -> . escribir
    (32) bloqueB -> . leer
    (33) bloqueB -> . dec_vars
    (34) bloqueB -> . llam_func
    (35) bloqueB -> . regresar
    (93) empty -> .
    (38) asignacion -> . llam_vars ASSIGN expresion
    (75) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (79) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (82) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (87) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (71) llam_func -> . ID LPAREN llam_params RPAREN
    (91) regresar -> . RETURN LPAREN expresion RPAREN
    (39) llam_vars -> . ID llam_varsB

    RCURLY          reduce using rule 93 (empty -> .)
    FOR             shift and go to state 56
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ESCRITURA       shift and go to state 60
    LECTURA         shift and go to state 61
    VAR             shift and go to state 7
    ID              shift and go to state 57
    RETURN          shift and go to state 62

    bloqueB                        shift and go to state 67
    bloqueBB                       shift and go to state 68
    empty                          shift and go to state 69
    asignacion                     shift and go to state 46
    ciclo_para_cada                shift and go to state 47
    ciclo_mientras                 shift and go to state 48
    condicion                      shift and go to state 49
    escribir                       shift and go to state 50
    leer                           shift and go to state 51
    dec_vars                       shift and go to state 52
    llam_func                      shift and go to state 53
    regresar                       shift and go to state 54
    llam_vars                      shift and go to state 55

state 46

    (27) bloqueB -> asignacion .

    FOR             reduce using rule 27 (bloqueB -> asignacion .)
    WHILE           reduce using rule 27 (bloqueB -> asignacion .)
    IF              reduce using rule 27 (bloqueB -> asignacion .)
    ESCRITURA       reduce using rule 27 (bloqueB -> asignacion .)
    LECTURA         reduce using rule 27 (bloqueB -> asignacion .)
    VAR             reduce using rule 27 (bloqueB -> asignacion .)
    ID              reduce using rule 27 (bloqueB -> asignacion .)
    RETURN          reduce using rule 27 (bloqueB -> asignacion .)
    RCURLY          reduce using rule 27 (bloqueB -> asignacion .)


state 47

    (28) bloqueB -> ciclo_para_cada .

    FOR             reduce using rule 28 (bloqueB -> ciclo_para_cada .)
    WHILE           reduce using rule 28 (bloqueB -> ciclo_para_cada .)
    IF              reduce using rule 28 (bloqueB -> ciclo_para_cada .)
    ESCRITURA       reduce using rule 28 (bloqueB -> ciclo_para_cada .)
    LECTURA         reduce using rule 28 (bloqueB -> ciclo_para_cada .)
    VAR             reduce using rule 28 (bloqueB -> ciclo_para_cada .)
    ID              reduce using rule 28 (bloqueB -> ciclo_para_cada .)
    RETURN          reduce using rule 28 (bloqueB -> ciclo_para_cada .)
    RCURLY          reduce using rule 28 (bloqueB -> ciclo_para_cada .)


state 48

    (29) bloqueB -> ciclo_mientras .

    FOR             reduce using rule 29 (bloqueB -> ciclo_mientras .)
    WHILE           reduce using rule 29 (bloqueB -> ciclo_mientras .)
    IF              reduce using rule 29 (bloqueB -> ciclo_mientras .)
    ESCRITURA       reduce using rule 29 (bloqueB -> ciclo_mientras .)
    LECTURA         reduce using rule 29 (bloqueB -> ciclo_mientras .)
    VAR             reduce using rule 29 (bloqueB -> ciclo_mientras .)
    ID              reduce using rule 29 (bloqueB -> ciclo_mientras .)
    RETURN          reduce using rule 29 (bloqueB -> ciclo_mientras .)
    RCURLY          reduce using rule 29 (bloqueB -> ciclo_mientras .)


state 49

    (30) bloqueB -> condicion .

    FOR             reduce using rule 30 (bloqueB -> condicion .)
    WHILE           reduce using rule 30 (bloqueB -> condicion .)
    IF              reduce using rule 30 (bloqueB -> condicion .)
    ESCRITURA       reduce using rule 30 (bloqueB -> condicion .)
    LECTURA         reduce using rule 30 (bloqueB -> condicion .)
    VAR             reduce using rule 30 (bloqueB -> condicion .)
    ID              reduce using rule 30 (bloqueB -> condicion .)
    RETURN          reduce using rule 30 (bloqueB -> condicion .)
    RCURLY          reduce using rule 30 (bloqueB -> condicion .)


state 50

    (31) bloqueB -> escribir .

    FOR             reduce using rule 31 (bloqueB -> escribir .)
    WHILE           reduce using rule 31 (bloqueB -> escribir .)
    IF              reduce using rule 31 (bloqueB -> escribir .)
    ESCRITURA       reduce using rule 31 (bloqueB -> escribir .)
    LECTURA         reduce using rule 31 (bloqueB -> escribir .)
    VAR             reduce using rule 31 (bloqueB -> escribir .)
    ID              reduce using rule 31 (bloqueB -> escribir .)
    RETURN          reduce using rule 31 (bloqueB -> escribir .)
    RCURLY          reduce using rule 31 (bloqueB -> escribir .)


state 51

    (32) bloqueB -> leer .

    FOR             reduce using rule 32 (bloqueB -> leer .)
    WHILE           reduce using rule 32 (bloqueB -> leer .)
    IF              reduce using rule 32 (bloqueB -> leer .)
    ESCRITURA       reduce using rule 32 (bloqueB -> leer .)
    LECTURA         reduce using rule 32 (bloqueB -> leer .)
    VAR             reduce using rule 32 (bloqueB -> leer .)
    ID              reduce using rule 32 (bloqueB -> leer .)
    RETURN          reduce using rule 32 (bloqueB -> leer .)
    RCURLY          reduce using rule 32 (bloqueB -> leer .)


state 52

    (33) bloqueB -> dec_vars .

    FOR             reduce using rule 33 (bloqueB -> dec_vars .)
    WHILE           reduce using rule 33 (bloqueB -> dec_vars .)
    IF              reduce using rule 33 (bloqueB -> dec_vars .)
    ESCRITURA       reduce using rule 33 (bloqueB -> dec_vars .)
    LECTURA         reduce using rule 33 (bloqueB -> dec_vars .)
    VAR             reduce using rule 33 (bloqueB -> dec_vars .)
    ID              reduce using rule 33 (bloqueB -> dec_vars .)
    RETURN          reduce using rule 33 (bloqueB -> dec_vars .)
    RCURLY          reduce using rule 33 (bloqueB -> dec_vars .)


state 53

    (34) bloqueB -> llam_func .

    FOR             reduce using rule 34 (bloqueB -> llam_func .)
    WHILE           reduce using rule 34 (bloqueB -> llam_func .)
    IF              reduce using rule 34 (bloqueB -> llam_func .)
    ESCRITURA       reduce using rule 34 (bloqueB -> llam_func .)
    LECTURA         reduce using rule 34 (bloqueB -> llam_func .)
    VAR             reduce using rule 34 (bloqueB -> llam_func .)
    ID              reduce using rule 34 (bloqueB -> llam_func .)
    RETURN          reduce using rule 34 (bloqueB -> llam_func .)
    RCURLY          reduce using rule 34 (bloqueB -> llam_func .)


state 54

    (35) bloqueB -> regresar .

    FOR             reduce using rule 35 (bloqueB -> regresar .)
    WHILE           reduce using rule 35 (bloqueB -> regresar .)
    IF              reduce using rule 35 (bloqueB -> regresar .)
    ESCRITURA       reduce using rule 35 (bloqueB -> regresar .)
    LECTURA         reduce using rule 35 (bloqueB -> regresar .)
    VAR             reduce using rule 35 (bloqueB -> regresar .)
    ID              reduce using rule 35 (bloqueB -> regresar .)
    RETURN          reduce using rule 35 (bloqueB -> regresar .)
    RCURLY          reduce using rule 35 (bloqueB -> regresar .)


state 55

    (38) asignacion -> llam_vars . ASSIGN expresion

    ASSIGN          shift and go to state 70


state 56

    (75) ciclo_para_cada -> FOR . LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY

    LPAREN          shift and go to state 71


state 57

    (71) llam_func -> ID . LPAREN llam_params RPAREN
    (39) llam_vars -> ID . llam_varsB
    (40) llam_varsB -> . LBRACE CTEENT RBRACE
    (41) llam_varsB -> . LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE
    (42) llam_varsB -> . empty
    (93) empty -> .

    LPAREN          shift and go to state 72
    LBRACE          shift and go to state 74
    ASSIGN          reduce using rule 93 (empty -> .)

    llam_varsB                     shift and go to state 73
    empty                          shift and go to state 75

state 58

    (78) ciclo_mientras -> WHILE . LPAREN expresion RPAREN LCURLY bloque RCURLY

    LPAREN          shift and go to state 76


state 59

    (79) condicion -> IF . LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB

    LPAREN          shift and go to state 77


state 60

    (82) escribir -> ESCRITURA . LPAREN escribirB RPAREN

    LPAREN          shift and go to state 78


state 61

    (87) leer -> LECTURA . LPAREN leerI RPAREN

    LPAREN          shift and go to state 79


state 62

    (91) regresar -> RETURN . LPAREN expresion RPAREN

    LPAREN          shift and go to state 80


state 63

    (21) dec_params -> ID COLON tipo . dec_paramsB
    (22) dec_paramsB -> . COMMA dec_params
    (23) dec_paramsB -> . empty
    (93) empty -> .

    COMMA           shift and go to state 82
    RPAREN          reduce using rule 93 (empty -> .)

    dec_paramsB                    shift and go to state 81
    empty                          shift and go to state 83

state 64

    (20) dec_func -> FUNCION ID LPAREN dec_params RPAREN COLON . tipo_func LCURLY bloque RCURLY
    (24) tipo_func -> . tipo
    (25) tipo_func -> . VOID
    (16) tipo -> . TIPOENT
    (17) tipo -> . TIPODEC
    (18) tipo -> . TIPOLETRA
    (19) tipo -> . TIPOLOGI

    VOID            shift and go to state 86
    TIPOENT         shift and go to state 26
    TIPODEC         shift and go to state 27
    TIPOLETRA       shift and go to state 28
    TIPOLOGI        shift and go to state 29

    tipo_func                      shift and go to state 84
    tipo                           shift and go to state 85

state 65

    (11) dec_varsB -> LBRACE CTEENT RBRACE .
    (12) dec_varsB -> LBRACE CTEENT RBRACE . LBRACE CTEENT RBRACE

    VAR             reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    FUNCION         reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    FOR             reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    WHILE           reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    IF              reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    ESCRITURA       reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    LECTURA         reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    ID              reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    RETURN          reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    RCURLY          reduce using rule 11 (dec_varsB -> LBRACE CTEENT RBRACE .)
    LBRACE          shift and go to state 87


state 66

    (92) inicio -> MAIN LPAREN RPAREN LCURLY bloque RCURLY .

    $end            reduce using rule 92 (inicio -> MAIN LPAREN RPAREN LCURLY bloque RCURLY .)


state 67

    (36) bloqueBB -> bloqueB . bloqueBB
    (36) bloqueBB -> . bloqueB bloqueBB
    (37) bloqueBB -> . empty
    (27) bloqueB -> . asignacion
    (28) bloqueB -> . ciclo_para_cada
    (29) bloqueB -> . ciclo_mientras
    (30) bloqueB -> . condicion
    (31) bloqueB -> . escribir
    (32) bloqueB -> . leer
    (33) bloqueB -> . dec_vars
    (34) bloqueB -> . llam_func
    (35) bloqueB -> . regresar
    (93) empty -> .
    (38) asignacion -> . llam_vars ASSIGN expresion
    (75) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (79) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (82) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (87) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (71) llam_func -> . ID LPAREN llam_params RPAREN
    (91) regresar -> . RETURN LPAREN expresion RPAREN
    (39) llam_vars -> . ID llam_varsB

    RCURLY          reduce using rule 93 (empty -> .)
    FOR             shift and go to state 56
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ESCRITURA       shift and go to state 60
    LECTURA         shift and go to state 61
    VAR             shift and go to state 7
    ID              shift and go to state 57
    RETURN          shift and go to state 62

    bloqueB                        shift and go to state 67
    bloqueBB                       shift and go to state 88
    empty                          shift and go to state 69
    asignacion                     shift and go to state 46
    ciclo_para_cada                shift and go to state 47
    ciclo_mientras                 shift and go to state 48
    condicion                      shift and go to state 49
    escribir                       shift and go to state 50
    leer                           shift and go to state 51
    dec_vars                       shift and go to state 52
    llam_func                      shift and go to state 53
    regresar                       shift and go to state 54
    llam_vars                      shift and go to state 55

state 68

    (26) bloque -> bloqueB bloqueBB .

    RCURLY          reduce using rule 26 (bloque -> bloqueB bloqueBB .)


state 69

    (37) bloqueBB -> empty .

    RCURLY          reduce using rule 37 (bloqueBB -> empty .)


state 70

    (38) asignacion -> llam_vars ASSIGN . expresion
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    llam_vars                      shift and go to state 89
    expresion                      shift and go to state 90
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_func                      shift and go to state 97

state 71

    (75) ciclo_para_cada -> FOR LPAREN . ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY

    ID              shift and go to state 101


state 72

    (71) llam_func -> ID LPAREN . llam_params RPAREN
    (72) llam_params -> . expresion llam_paramsB
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    llam_params                    shift and go to state 102
    expresion                      shift and go to state 103
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 73

    (39) llam_vars -> ID llam_varsB .

    ASSIGN          reduce using rule 39 (llam_vars -> ID llam_varsB .)
    TIMES           reduce using rule 39 (llam_vars -> ID llam_varsB .)
    DIVIDE          reduce using rule 39 (llam_vars -> ID llam_varsB .)
    PLUS            reduce using rule 39 (llam_vars -> ID llam_varsB .)
    MINUS           reduce using rule 39 (llam_vars -> ID llam_varsB .)
    LT              reduce using rule 39 (llam_vars -> ID llam_varsB .)
    GT              reduce using rule 39 (llam_vars -> ID llam_varsB .)
    LTE             reduce using rule 39 (llam_vars -> ID llam_varsB .)
    GTE             reduce using rule 39 (llam_vars -> ID llam_varsB .)
    EQUAL           reduce using rule 39 (llam_vars -> ID llam_varsB .)
    NEQUAL          reduce using rule 39 (llam_vars -> ID llam_varsB .)
    AND             reduce using rule 39 (llam_vars -> ID llam_varsB .)
    OR              reduce using rule 39 (llam_vars -> ID llam_varsB .)
    FOR             reduce using rule 39 (llam_vars -> ID llam_varsB .)
    WHILE           reduce using rule 39 (llam_vars -> ID llam_varsB .)
    IF              reduce using rule 39 (llam_vars -> ID llam_varsB .)
    ESCRITURA       reduce using rule 39 (llam_vars -> ID llam_varsB .)
    LECTURA         reduce using rule 39 (llam_vars -> ID llam_varsB .)
    VAR             reduce using rule 39 (llam_vars -> ID llam_varsB .)
    ID              reduce using rule 39 (llam_vars -> ID llam_varsB .)
    RETURN          reduce using rule 39 (llam_vars -> ID llam_varsB .)
    RCURLY          reduce using rule 39 (llam_vars -> ID llam_varsB .)
    COMMA           reduce using rule 39 (llam_vars -> ID llam_varsB .)
    RPAREN          reduce using rule 39 (llam_vars -> ID llam_varsB .)


state 74

    (40) llam_varsB -> LBRACE . CTEENT RBRACE
    (41) llam_varsB -> LBRACE . CTEENT RBRACE LBRACE CTEENT RBRACE

    CTEENT          shift and go to state 104


state 75

    (42) llam_varsB -> empty .

    ASSIGN          reduce using rule 42 (llam_varsB -> empty .)
    TIMES           reduce using rule 42 (llam_varsB -> empty .)
    DIVIDE          reduce using rule 42 (llam_varsB -> empty .)
    PLUS            reduce using rule 42 (llam_varsB -> empty .)
    MINUS           reduce using rule 42 (llam_varsB -> empty .)
    LT              reduce using rule 42 (llam_varsB -> empty .)
    GT              reduce using rule 42 (llam_varsB -> empty .)
    LTE             reduce using rule 42 (llam_varsB -> empty .)
    GTE             reduce using rule 42 (llam_varsB -> empty .)
    EQUAL           reduce using rule 42 (llam_varsB -> empty .)
    NEQUAL          reduce using rule 42 (llam_varsB -> empty .)
    AND             reduce using rule 42 (llam_varsB -> empty .)
    OR              reduce using rule 42 (llam_varsB -> empty .)
    FOR             reduce using rule 42 (llam_varsB -> empty .)
    WHILE           reduce using rule 42 (llam_varsB -> empty .)
    IF              reduce using rule 42 (llam_varsB -> empty .)
    ESCRITURA       reduce using rule 42 (llam_varsB -> empty .)
    LECTURA         reduce using rule 42 (llam_varsB -> empty .)
    VAR             reduce using rule 42 (llam_varsB -> empty .)
    ID              reduce using rule 42 (llam_varsB -> empty .)
    RETURN          reduce using rule 42 (llam_varsB -> empty .)
    RCURLY          reduce using rule 42 (llam_varsB -> empty .)
    COMMA           reduce using rule 42 (llam_varsB -> empty .)
    RPAREN          reduce using rule 42 (llam_varsB -> empty .)


state 76

    (78) ciclo_mientras -> WHILE LPAREN . expresion RPAREN LCURLY bloque RCURLY
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    expresion                      shift and go to state 105
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 77

    (79) condicion -> IF LPAREN . expresion RPAREN LCURLY bloque RCURLY condicionB
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    expresion                      shift and go to state 106
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 78

    (82) escribir -> ESCRITURA LPAREN . escribirB RPAREN
    (83) escribirB -> . expresion escribirBB
    (84) escribirB -> . CTEFRASE escribirBB
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    CTEFRASE        shift and go to state 109
    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    escribirB                      shift and go to state 107
    expresion                      shift and go to state 108
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 79

    (87) leer -> LECTURA LPAREN . leerI RPAREN
    (88) leerI -> . ID leerII

    ID              shift and go to state 111

    leerI                          shift and go to state 110

state 80

    (91) regresar -> RETURN LPAREN . expresion RPAREN
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    expresion                      shift and go to state 112
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 81

    (21) dec_params -> ID COLON tipo dec_paramsB .

    RPAREN          reduce using rule 21 (dec_params -> ID COLON tipo dec_paramsB .)


state 82

    (22) dec_paramsB -> COMMA . dec_params
    (21) dec_params -> . ID COLON tipo dec_paramsB

    ID              shift and go to state 32

    dec_params                     shift and go to state 113

state 83

    (23) dec_paramsB -> empty .

    RPAREN          reduce using rule 23 (dec_paramsB -> empty .)


state 84

    (20) dec_func -> FUNCION ID LPAREN dec_params RPAREN COLON tipo_func . LCURLY bloque RCURLY

    LCURLY          shift and go to state 114


state 85

    (24) tipo_func -> tipo .

    LCURLY          reduce using rule 24 (tipo_func -> tipo .)


state 86

    (25) tipo_func -> VOID .

    LCURLY          reduce using rule 25 (tipo_func -> VOID .)


state 87

    (12) dec_varsB -> LBRACE CTEENT RBRACE LBRACE . CTEENT RBRACE

    CTEENT          shift and go to state 115


state 88

    (36) bloqueBB -> bloqueB bloqueBB .

    RCURLY          reduce using rule 36 (bloqueBB -> bloqueB bloqueBB .)


state 89

    (67) factor -> llam_vars .

    TIMES           reduce using rule 67 (factor -> llam_vars .)
    DIVIDE          reduce using rule 67 (factor -> llam_vars .)
    PLUS            reduce using rule 67 (factor -> llam_vars .)
    MINUS           reduce using rule 67 (factor -> llam_vars .)
    LT              reduce using rule 67 (factor -> llam_vars .)
    GT              reduce using rule 67 (factor -> llam_vars .)
    LTE             reduce using rule 67 (factor -> llam_vars .)
    GTE             reduce using rule 67 (factor -> llam_vars .)
    EQUAL           reduce using rule 67 (factor -> llam_vars .)
    NEQUAL          reduce using rule 67 (factor -> llam_vars .)
    AND             reduce using rule 67 (factor -> llam_vars .)
    OR              reduce using rule 67 (factor -> llam_vars .)
    ASSIGN          reduce using rule 67 (factor -> llam_vars .)
    FOR             reduce using rule 67 (factor -> llam_vars .)
    WHILE           reduce using rule 67 (factor -> llam_vars .)
    IF              reduce using rule 67 (factor -> llam_vars .)
    ESCRITURA       reduce using rule 67 (factor -> llam_vars .)
    LECTURA         reduce using rule 67 (factor -> llam_vars .)
    VAR             reduce using rule 67 (factor -> llam_vars .)
    ID              reduce using rule 67 (factor -> llam_vars .)
    RETURN          reduce using rule 67 (factor -> llam_vars .)
    RCURLY          reduce using rule 67 (factor -> llam_vars .)
    COMMA           reduce using rule 67 (factor -> llam_vars .)
    RPAREN          reduce using rule 67 (factor -> llam_vars .)


state 90

    (38) asignacion -> llam_vars ASSIGN expresion .

    FOR             reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)
    WHILE           reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)
    IF              reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)
    ESCRITURA       reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)
    LECTURA         reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)
    VAR             reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)
    ID              reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)
    RETURN          reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)
    RCURLY          reduce using rule 38 (asignacion -> llam_vars ASSIGN expresion .)


state 91

    (43) expresion -> peta_exp . expresionB
    (44) expresionB -> . ASSIGN expresion
    (45) expresionB -> . empty
    (93) empty -> .

    ASSIGN          shift and go to state 117
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)

    expresionB                     shift and go to state 116
    empty                          shift and go to state 118

state 92

    (46) peta_exp -> tera_exp . peta_expB
    (47) peta_expB -> . AND peta_exp
    (48) peta_expB -> . OR peta_exp
    (49) peta_expB -> . empty
    (93) empty -> .

    AND             shift and go to state 120
    OR              shift and go to state 121
    ASSIGN          reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)

    peta_expB                      shift and go to state 119
    empty                          shift and go to state 122

state 93

    (50) tera_exp -> mega_exp . tera_expB
    (51) tera_expB -> . LT tera_exp
    (52) tera_expB -> . GT tera_exp
    (53) tera_expB -> . LTE tera_exp
    (54) tera_expB -> . GTE tera_exp
    (55) tera_expB -> . EQUAL tera_exp
    (56) tera_expB -> . NEQUAL tera_exp
    (57) tera_expB -> . empty
    (93) empty -> .

    LT              shift and go to state 124
    GT              shift and go to state 125
    LTE             shift and go to state 126
    GTE             shift and go to state 127
    EQUAL           shift and go to state 128
    NEQUAL          shift and go to state 129
    AND             reduce using rule 93 (empty -> .)
    OR              reduce using rule 93 (empty -> .)
    ASSIGN          reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)

    tera_expB                      shift and go to state 123
    empty                          shift and go to state 130

state 94

    (58) mega_exp -> kilo_exp . mega_expB
    (59) mega_expB -> . PLUS mega_exp
    (60) mega_expB -> . MINUS mega_exp
    (61) mega_expB -> . empty
    (93) empty -> .

    PLUS            shift and go to state 132
    MINUS           shift and go to state 133
    LT              reduce using rule 93 (empty -> .)
    GT              reduce using rule 93 (empty -> .)
    LTE             reduce using rule 93 (empty -> .)
    GTE             reduce using rule 93 (empty -> .)
    EQUAL           reduce using rule 93 (empty -> .)
    NEQUAL          reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    OR              reduce using rule 93 (empty -> .)
    ASSIGN          reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)

    mega_expB                      shift and go to state 131
    empty                          shift and go to state 134

state 95

    (62) kilo_exp -> factor . kilo_expB
    (63) kilo_expB -> . TIMES kilo_exp
    (64) kilo_expB -> . DIVIDE kilo_exp
    (65) kilo_expB -> . empty
    (93) empty -> .

    TIMES           shift and go to state 136
    DIVIDE          shift and go to state 137
    PLUS            reduce using rule 93 (empty -> .)
    MINUS           reduce using rule 93 (empty -> .)
    LT              reduce using rule 93 (empty -> .)
    GT              reduce using rule 93 (empty -> .)
    LTE             reduce using rule 93 (empty -> .)
    GTE             reduce using rule 93 (empty -> .)
    EQUAL           reduce using rule 93 (empty -> .)
    NEQUAL          reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    OR              reduce using rule 93 (empty -> .)
    ASSIGN          reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)

    kilo_expB                      shift and go to state 135
    empty                          shift and go to state 138

state 96

    (66) factor -> LPAREN . expresion RPAREN
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    expresion                      shift and go to state 139
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 97

    (68) factor -> llam_func .

    TIMES           reduce using rule 68 (factor -> llam_func .)
    DIVIDE          reduce using rule 68 (factor -> llam_func .)
    PLUS            reduce using rule 68 (factor -> llam_func .)
    MINUS           reduce using rule 68 (factor -> llam_func .)
    LT              reduce using rule 68 (factor -> llam_func .)
    GT              reduce using rule 68 (factor -> llam_func .)
    LTE             reduce using rule 68 (factor -> llam_func .)
    GTE             reduce using rule 68 (factor -> llam_func .)
    EQUAL           reduce using rule 68 (factor -> llam_func .)
    NEQUAL          reduce using rule 68 (factor -> llam_func .)
    AND             reduce using rule 68 (factor -> llam_func .)
    OR              reduce using rule 68 (factor -> llam_func .)
    ASSIGN          reduce using rule 68 (factor -> llam_func .)
    FOR             reduce using rule 68 (factor -> llam_func .)
    WHILE           reduce using rule 68 (factor -> llam_func .)
    IF              reduce using rule 68 (factor -> llam_func .)
    ESCRITURA       reduce using rule 68 (factor -> llam_func .)
    LECTURA         reduce using rule 68 (factor -> llam_func .)
    VAR             reduce using rule 68 (factor -> llam_func .)
    ID              reduce using rule 68 (factor -> llam_func .)
    RETURN          reduce using rule 68 (factor -> llam_func .)
    RCURLY          reduce using rule 68 (factor -> llam_func .)
    COMMA           reduce using rule 68 (factor -> llam_func .)
    RPAREN          reduce using rule 68 (factor -> llam_func .)


state 98

    (69) factor -> CTEENT .

    TIMES           reduce using rule 69 (factor -> CTEENT .)
    DIVIDE          reduce using rule 69 (factor -> CTEENT .)
    PLUS            reduce using rule 69 (factor -> CTEENT .)
    MINUS           reduce using rule 69 (factor -> CTEENT .)
    LT              reduce using rule 69 (factor -> CTEENT .)
    GT              reduce using rule 69 (factor -> CTEENT .)
    LTE             reduce using rule 69 (factor -> CTEENT .)
    GTE             reduce using rule 69 (factor -> CTEENT .)
    EQUAL           reduce using rule 69 (factor -> CTEENT .)
    NEQUAL          reduce using rule 69 (factor -> CTEENT .)
    AND             reduce using rule 69 (factor -> CTEENT .)
    OR              reduce using rule 69 (factor -> CTEENT .)
    ASSIGN          reduce using rule 69 (factor -> CTEENT .)
    FOR             reduce using rule 69 (factor -> CTEENT .)
    WHILE           reduce using rule 69 (factor -> CTEENT .)
    IF              reduce using rule 69 (factor -> CTEENT .)
    ESCRITURA       reduce using rule 69 (factor -> CTEENT .)
    LECTURA         reduce using rule 69 (factor -> CTEENT .)
    VAR             reduce using rule 69 (factor -> CTEENT .)
    ID              reduce using rule 69 (factor -> CTEENT .)
    RETURN          reduce using rule 69 (factor -> CTEENT .)
    RCURLY          reduce using rule 69 (factor -> CTEENT .)
    COMMA           reduce using rule 69 (factor -> CTEENT .)
    RPAREN          reduce using rule 69 (factor -> CTEENT .)


state 99

    (70) factor -> CTEDECI .

    TIMES           reduce using rule 70 (factor -> CTEDECI .)
    DIVIDE          reduce using rule 70 (factor -> CTEDECI .)
    PLUS            reduce using rule 70 (factor -> CTEDECI .)
    MINUS           reduce using rule 70 (factor -> CTEDECI .)
    LT              reduce using rule 70 (factor -> CTEDECI .)
    GT              reduce using rule 70 (factor -> CTEDECI .)
    LTE             reduce using rule 70 (factor -> CTEDECI .)
    GTE             reduce using rule 70 (factor -> CTEDECI .)
    EQUAL           reduce using rule 70 (factor -> CTEDECI .)
    NEQUAL          reduce using rule 70 (factor -> CTEDECI .)
    AND             reduce using rule 70 (factor -> CTEDECI .)
    OR              reduce using rule 70 (factor -> CTEDECI .)
    ASSIGN          reduce using rule 70 (factor -> CTEDECI .)
    FOR             reduce using rule 70 (factor -> CTEDECI .)
    WHILE           reduce using rule 70 (factor -> CTEDECI .)
    IF              reduce using rule 70 (factor -> CTEDECI .)
    ESCRITURA       reduce using rule 70 (factor -> CTEDECI .)
    LECTURA         reduce using rule 70 (factor -> CTEDECI .)
    VAR             reduce using rule 70 (factor -> CTEDECI .)
    ID              reduce using rule 70 (factor -> CTEDECI .)
    RETURN          reduce using rule 70 (factor -> CTEDECI .)
    RCURLY          reduce using rule 70 (factor -> CTEDECI .)
    COMMA           reduce using rule 70 (factor -> CTEDECI .)
    RPAREN          reduce using rule 70 (factor -> CTEDECI .)


state 100

    (39) llam_vars -> ID . llam_varsB
    (71) llam_func -> ID . LPAREN llam_params RPAREN
    (40) llam_varsB -> . LBRACE CTEENT RBRACE
    (41) llam_varsB -> . LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE
    (42) llam_varsB -> . empty
    (93) empty -> .

    LPAREN          shift and go to state 72
    LBRACE          shift and go to state 74
    TIMES           reduce using rule 93 (empty -> .)
    DIVIDE          reduce using rule 93 (empty -> .)
    PLUS            reduce using rule 93 (empty -> .)
    MINUS           reduce using rule 93 (empty -> .)
    LT              reduce using rule 93 (empty -> .)
    GT              reduce using rule 93 (empty -> .)
    LTE             reduce using rule 93 (empty -> .)
    GTE             reduce using rule 93 (empty -> .)
    EQUAL           reduce using rule 93 (empty -> .)
    NEQUAL          reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    OR              reduce using rule 93 (empty -> .)
    ASSIGN          reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)
    COMMA           reduce using rule 93 (empty -> .)
    RPAREN          reduce using rule 93 (empty -> .)

    llam_varsB                     shift and go to state 73
    empty                          shift and go to state 75

state 101

    (75) ciclo_para_cada -> FOR LPAREN ID . IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY

    IN              shift and go to state 140


state 102

    (71) llam_func -> ID LPAREN llam_params . RPAREN

    RPAREN          shift and go to state 141


state 103

    (72) llam_params -> expresion . llam_paramsB
    (73) llam_paramsB -> . COMMA llam_params
    (74) llam_paramsB -> . empty
    (93) empty -> .

    COMMA           shift and go to state 143
    RPAREN          reduce using rule 93 (empty -> .)

    llam_paramsB                   shift and go to state 142
    empty                          shift and go to state 144

state 104

    (40) llam_varsB -> LBRACE CTEENT . RBRACE
    (41) llam_varsB -> LBRACE CTEENT . RBRACE LBRACE CTEENT RBRACE

    RBRACE          shift and go to state 145


state 105

    (78) ciclo_mientras -> WHILE LPAREN expresion . RPAREN LCURLY bloque RCURLY

    RPAREN          shift and go to state 146


state 106

    (79) condicion -> IF LPAREN expresion . RPAREN LCURLY bloque RCURLY condicionB

    RPAREN          shift and go to state 147


state 107

    (82) escribir -> ESCRITURA LPAREN escribirB . RPAREN

    RPAREN          shift and go to state 148


state 108

    (83) escribirB -> expresion . escribirBB
    (85) escribirBB -> . COMMA escribirB
    (86) escribirBB -> . empty
    (93) empty -> .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 93 (empty -> .)

    escribirBB                     shift and go to state 149
    empty                          shift and go to state 151

state 109

    (84) escribirB -> CTEFRASE . escribirBB
    (85) escribirBB -> . COMMA escribirB
    (86) escribirBB -> . empty
    (93) empty -> .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 93 (empty -> .)

    escribirBB                     shift and go to state 152
    empty                          shift and go to state 151

state 110

    (87) leer -> LECTURA LPAREN leerI . RPAREN

    RPAREN          shift and go to state 153


state 111

    (88) leerI -> ID . leerII
    (89) leerII -> . COMMA ID
    (90) leerII -> . empty
    (93) empty -> .

    COMMA           shift and go to state 155
    RPAREN          reduce using rule 93 (empty -> .)

    leerII                         shift and go to state 154
    empty                          shift and go to state 156

state 112

    (91) regresar -> RETURN LPAREN expresion . RPAREN

    RPAREN          shift and go to state 157


state 113

    (22) dec_paramsB -> COMMA dec_params .

    RPAREN          reduce using rule 22 (dec_paramsB -> COMMA dec_params .)


state 114

    (20) dec_func -> FUNCION ID LPAREN dec_params RPAREN COLON tipo_func LCURLY . bloque RCURLY
    (26) bloque -> . bloqueB bloqueBB
    (27) bloqueB -> . asignacion
    (28) bloqueB -> . ciclo_para_cada
    (29) bloqueB -> . ciclo_mientras
    (30) bloqueB -> . condicion
    (31) bloqueB -> . escribir
    (32) bloqueB -> . leer
    (33) bloqueB -> . dec_vars
    (34) bloqueB -> . llam_func
    (35) bloqueB -> . regresar
    (38) asignacion -> . llam_vars ASSIGN expresion
    (75) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (79) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (82) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (87) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (71) llam_func -> . ID LPAREN llam_params RPAREN
    (91) regresar -> . RETURN LPAREN expresion RPAREN
    (39) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 56
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ESCRITURA       shift and go to state 60
    LECTURA         shift and go to state 61
    VAR             shift and go to state 7
    ID              shift and go to state 57
    RETURN          shift and go to state 62

    bloque                         shift and go to state 158
    bloqueB                        shift and go to state 45
    asignacion                     shift and go to state 46
    ciclo_para_cada                shift and go to state 47
    ciclo_mientras                 shift and go to state 48
    condicion                      shift and go to state 49
    escribir                       shift and go to state 50
    leer                           shift and go to state 51
    dec_vars                       shift and go to state 52
    llam_func                      shift and go to state 53
    regresar                       shift and go to state 54
    llam_vars                      shift and go to state 55

state 115

    (12) dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT . RBRACE

    RBRACE          shift and go to state 159


state 116

    (43) expresion -> peta_exp expresionB .

    FOR             reduce using rule 43 (expresion -> peta_exp expresionB .)
    WHILE           reduce using rule 43 (expresion -> peta_exp expresionB .)
    IF              reduce using rule 43 (expresion -> peta_exp expresionB .)
    ESCRITURA       reduce using rule 43 (expresion -> peta_exp expresionB .)
    LECTURA         reduce using rule 43 (expresion -> peta_exp expresionB .)
    VAR             reduce using rule 43 (expresion -> peta_exp expresionB .)
    ID              reduce using rule 43 (expresion -> peta_exp expresionB .)
    RETURN          reduce using rule 43 (expresion -> peta_exp expresionB .)
    RCURLY          reduce using rule 43 (expresion -> peta_exp expresionB .)
    COMMA           reduce using rule 43 (expresion -> peta_exp expresionB .)
    RPAREN          reduce using rule 43 (expresion -> peta_exp expresionB .)


state 117

    (44) expresionB -> ASSIGN . expresion
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    expresion                      shift and go to state 160
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 118

    (45) expresionB -> empty .

    FOR             reduce using rule 45 (expresionB -> empty .)
    WHILE           reduce using rule 45 (expresionB -> empty .)
    IF              reduce using rule 45 (expresionB -> empty .)
    ESCRITURA       reduce using rule 45 (expresionB -> empty .)
    LECTURA         reduce using rule 45 (expresionB -> empty .)
    VAR             reduce using rule 45 (expresionB -> empty .)
    ID              reduce using rule 45 (expresionB -> empty .)
    RETURN          reduce using rule 45 (expresionB -> empty .)
    RCURLY          reduce using rule 45 (expresionB -> empty .)
    COMMA           reduce using rule 45 (expresionB -> empty .)
    RPAREN          reduce using rule 45 (expresionB -> empty .)


state 119

    (46) peta_exp -> tera_exp peta_expB .

    ASSIGN          reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    FOR             reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    WHILE           reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    IF              reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    ESCRITURA       reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    LECTURA         reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    VAR             reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    ID              reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    RETURN          reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    RCURLY          reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    COMMA           reduce using rule 46 (peta_exp -> tera_exp peta_expB .)
    RPAREN          reduce using rule 46 (peta_exp -> tera_exp peta_expB .)


state 120

    (47) peta_expB -> AND . peta_exp
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    peta_exp                       shift and go to state 161
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 121

    (48) peta_expB -> OR . peta_exp
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    peta_exp                       shift and go to state 162
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 122

    (49) peta_expB -> empty .

    ASSIGN          reduce using rule 49 (peta_expB -> empty .)
    FOR             reduce using rule 49 (peta_expB -> empty .)
    WHILE           reduce using rule 49 (peta_expB -> empty .)
    IF              reduce using rule 49 (peta_expB -> empty .)
    ESCRITURA       reduce using rule 49 (peta_expB -> empty .)
    LECTURA         reduce using rule 49 (peta_expB -> empty .)
    VAR             reduce using rule 49 (peta_expB -> empty .)
    ID              reduce using rule 49 (peta_expB -> empty .)
    RETURN          reduce using rule 49 (peta_expB -> empty .)
    RCURLY          reduce using rule 49 (peta_expB -> empty .)
    COMMA           reduce using rule 49 (peta_expB -> empty .)
    RPAREN          reduce using rule 49 (peta_expB -> empty .)


state 123

    (50) tera_exp -> mega_exp tera_expB .

    AND             reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    OR              reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    ASSIGN          reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    FOR             reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    WHILE           reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    IF              reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    ESCRITURA       reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    LECTURA         reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    VAR             reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    ID              reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    RETURN          reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    RCURLY          reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    COMMA           reduce using rule 50 (tera_exp -> mega_exp tera_expB .)
    RPAREN          reduce using rule 50 (tera_exp -> mega_exp tera_expB .)


state 124

    (51) tera_expB -> LT . tera_exp
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    tera_exp                       shift and go to state 163
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 125

    (52) tera_expB -> GT . tera_exp
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    tera_exp                       shift and go to state 164
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 126

    (53) tera_expB -> LTE . tera_exp
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    tera_exp                       shift and go to state 165
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 127

    (54) tera_expB -> GTE . tera_exp
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    tera_exp                       shift and go to state 166
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 128

    (55) tera_expB -> EQUAL . tera_exp
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    tera_exp                       shift and go to state 167
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 129

    (56) tera_expB -> NEQUAL . tera_exp
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    tera_exp                       shift and go to state 168
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 130

    (57) tera_expB -> empty .

    AND             reduce using rule 57 (tera_expB -> empty .)
    OR              reduce using rule 57 (tera_expB -> empty .)
    ASSIGN          reduce using rule 57 (tera_expB -> empty .)
    FOR             reduce using rule 57 (tera_expB -> empty .)
    WHILE           reduce using rule 57 (tera_expB -> empty .)
    IF              reduce using rule 57 (tera_expB -> empty .)
    ESCRITURA       reduce using rule 57 (tera_expB -> empty .)
    LECTURA         reduce using rule 57 (tera_expB -> empty .)
    VAR             reduce using rule 57 (tera_expB -> empty .)
    ID              reduce using rule 57 (tera_expB -> empty .)
    RETURN          reduce using rule 57 (tera_expB -> empty .)
    RCURLY          reduce using rule 57 (tera_expB -> empty .)
    COMMA           reduce using rule 57 (tera_expB -> empty .)
    RPAREN          reduce using rule 57 (tera_expB -> empty .)


state 131

    (58) mega_exp -> kilo_exp mega_expB .

    LT              reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    GT              reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    LTE             reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    GTE             reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    EQUAL           reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    NEQUAL          reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    AND             reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    OR              reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    ASSIGN          reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    FOR             reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    WHILE           reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    IF              reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    ESCRITURA       reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    LECTURA         reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    VAR             reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    ID              reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    RETURN          reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    RCURLY          reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    COMMA           reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)
    RPAREN          reduce using rule 58 (mega_exp -> kilo_exp mega_expB .)


state 132

    (59) mega_expB -> PLUS . mega_exp
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    mega_exp                       shift and go to state 169
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 133

    (60) mega_expB -> MINUS . mega_exp
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    mega_exp                       shift and go to state 170
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 134

    (61) mega_expB -> empty .

    LT              reduce using rule 61 (mega_expB -> empty .)
    GT              reduce using rule 61 (mega_expB -> empty .)
    LTE             reduce using rule 61 (mega_expB -> empty .)
    GTE             reduce using rule 61 (mega_expB -> empty .)
    EQUAL           reduce using rule 61 (mega_expB -> empty .)
    NEQUAL          reduce using rule 61 (mega_expB -> empty .)
    AND             reduce using rule 61 (mega_expB -> empty .)
    OR              reduce using rule 61 (mega_expB -> empty .)
    ASSIGN          reduce using rule 61 (mega_expB -> empty .)
    FOR             reduce using rule 61 (mega_expB -> empty .)
    WHILE           reduce using rule 61 (mega_expB -> empty .)
    IF              reduce using rule 61 (mega_expB -> empty .)
    ESCRITURA       reduce using rule 61 (mega_expB -> empty .)
    LECTURA         reduce using rule 61 (mega_expB -> empty .)
    VAR             reduce using rule 61 (mega_expB -> empty .)
    ID              reduce using rule 61 (mega_expB -> empty .)
    RETURN          reduce using rule 61 (mega_expB -> empty .)
    RCURLY          reduce using rule 61 (mega_expB -> empty .)
    COMMA           reduce using rule 61 (mega_expB -> empty .)
    RPAREN          reduce using rule 61 (mega_expB -> empty .)


state 135

    (62) kilo_exp -> factor kilo_expB .

    PLUS            reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    MINUS           reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    LT              reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    GT              reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    LTE             reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    GTE             reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    EQUAL           reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    NEQUAL          reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    AND             reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    OR              reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    ASSIGN          reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    FOR             reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    WHILE           reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    IF              reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    ESCRITURA       reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    LECTURA         reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    VAR             reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    ID              reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    RETURN          reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    RCURLY          reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    COMMA           reduce using rule 62 (kilo_exp -> factor kilo_expB .)
    RPAREN          reduce using rule 62 (kilo_exp -> factor kilo_expB .)


state 136

    (63) kilo_expB -> TIMES . kilo_exp
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    kilo_exp                       shift and go to state 171
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 137

    (64) kilo_expB -> DIVIDE . kilo_exp
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    kilo_exp                       shift and go to state 172
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 138

    (65) kilo_expB -> empty .

    PLUS            reduce using rule 65 (kilo_expB -> empty .)
    MINUS           reduce using rule 65 (kilo_expB -> empty .)
    LT              reduce using rule 65 (kilo_expB -> empty .)
    GT              reduce using rule 65 (kilo_expB -> empty .)
    LTE             reduce using rule 65 (kilo_expB -> empty .)
    GTE             reduce using rule 65 (kilo_expB -> empty .)
    EQUAL           reduce using rule 65 (kilo_expB -> empty .)
    NEQUAL          reduce using rule 65 (kilo_expB -> empty .)
    AND             reduce using rule 65 (kilo_expB -> empty .)
    OR              reduce using rule 65 (kilo_expB -> empty .)
    ASSIGN          reduce using rule 65 (kilo_expB -> empty .)
    FOR             reduce using rule 65 (kilo_expB -> empty .)
    WHILE           reduce using rule 65 (kilo_expB -> empty .)
    IF              reduce using rule 65 (kilo_expB -> empty .)
    ESCRITURA       reduce using rule 65 (kilo_expB -> empty .)
    LECTURA         reduce using rule 65 (kilo_expB -> empty .)
    VAR             reduce using rule 65 (kilo_expB -> empty .)
    ID              reduce using rule 65 (kilo_expB -> empty .)
    RETURN          reduce using rule 65 (kilo_expB -> empty .)
    RCURLY          reduce using rule 65 (kilo_expB -> empty .)
    COMMA           reduce using rule 65 (kilo_expB -> empty .)
    RPAREN          reduce using rule 65 (kilo_expB -> empty .)


state 139

    (66) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 173


state 140

    (75) ciclo_para_cada -> FOR LPAREN ID IN . ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY

    ID              shift and go to state 174


state 141

    (71) llam_func -> ID LPAREN llam_params RPAREN .

    FOR             reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    WHILE           reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    IF              reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    ESCRITURA       reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    LECTURA         reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    VAR             reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    ID              reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    RETURN          reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    RCURLY          reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    TIMES           reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    DIVIDE          reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    PLUS            reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    MINUS           reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    LT              reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    GT              reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    LTE             reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    GTE             reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    EQUAL           reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    NEQUAL          reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    AND             reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    OR              reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    ASSIGN          reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    COMMA           reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)
    RPAREN          reduce using rule 71 (llam_func -> ID LPAREN llam_params RPAREN .)


state 142

    (72) llam_params -> expresion llam_paramsB .

    RPAREN          reduce using rule 72 (llam_params -> expresion llam_paramsB .)


state 143

    (73) llam_paramsB -> COMMA . llam_params
    (72) llam_params -> . expresion llam_paramsB
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    llam_params                    shift and go to state 175
    expresion                      shift and go to state 103
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 144

    (74) llam_paramsB -> empty .

    RPAREN          reduce using rule 74 (llam_paramsB -> empty .)


state 145

    (40) llam_varsB -> LBRACE CTEENT RBRACE .
    (41) llam_varsB -> LBRACE CTEENT RBRACE . LBRACE CTEENT RBRACE

    ASSIGN          reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    TIMES           reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    DIVIDE          reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    PLUS            reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    MINUS           reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    LT              reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    GT              reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    LTE             reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    GTE             reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    EQUAL           reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    NEQUAL          reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    AND             reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    OR              reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    FOR             reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    WHILE           reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    IF              reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    ESCRITURA       reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    LECTURA         reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    VAR             reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    ID              reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    RETURN          reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    RCURLY          reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    COMMA           reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    RPAREN          reduce using rule 40 (llam_varsB -> LBRACE CTEENT RBRACE .)
    LBRACE          shift and go to state 176


state 146

    (78) ciclo_mientras -> WHILE LPAREN expresion RPAREN . LCURLY bloque RCURLY

    LCURLY          shift and go to state 177


state 147

    (79) condicion -> IF LPAREN expresion RPAREN . LCURLY bloque RCURLY condicionB

    LCURLY          shift and go to state 178


state 148

    (82) escribir -> ESCRITURA LPAREN escribirB RPAREN .

    FOR             reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    WHILE           reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    IF              reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    ESCRITURA       reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    LECTURA         reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    VAR             reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    ID              reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    RETURN          reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)
    RCURLY          reduce using rule 82 (escribir -> ESCRITURA LPAREN escribirB RPAREN .)


state 149

    (83) escribirB -> expresion escribirBB .

    RPAREN          reduce using rule 83 (escribirB -> expresion escribirBB .)


state 150

    (85) escribirBB -> COMMA . escribirB
    (83) escribirB -> . expresion escribirBB
    (84) escribirB -> . CTEFRASE escribirBB
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    CTEFRASE        shift and go to state 109
    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    escribirB                      shift and go to state 179
    expresion                      shift and go to state 108
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 151

    (86) escribirBB -> empty .

    RPAREN          reduce using rule 86 (escribirBB -> empty .)


state 152

    (84) escribirB -> CTEFRASE escribirBB .

    RPAREN          reduce using rule 84 (escribirB -> CTEFRASE escribirBB .)


state 153

    (87) leer -> LECTURA LPAREN leerI RPAREN .

    FOR             reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)
    WHILE           reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)
    IF              reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)
    ESCRITURA       reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)
    LECTURA         reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)
    VAR             reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)
    ID              reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)
    RETURN          reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)
    RCURLY          reduce using rule 87 (leer -> LECTURA LPAREN leerI RPAREN .)


state 154

    (88) leerI -> ID leerII .

    RPAREN          reduce using rule 88 (leerI -> ID leerII .)


state 155

    (89) leerII -> COMMA . ID

    ID              shift and go to state 180


state 156

    (90) leerII -> empty .

    RPAREN          reduce using rule 90 (leerII -> empty .)


state 157

    (91) regresar -> RETURN LPAREN expresion RPAREN .

    FOR             reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)
    WHILE           reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)
    IF              reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)
    ESCRITURA       reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)
    LECTURA         reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)
    VAR             reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)
    ID              reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)
    RETURN          reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)
    RCURLY          reduce using rule 91 (regresar -> RETURN LPAREN expresion RPAREN .)


state 158

    (20) dec_func -> FUNCION ID LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque . RCURLY

    RCURLY          shift and go to state 181


state 159

    (12) dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .

    VAR             reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    FUNCION         reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    FOR             reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    WHILE           reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    IF              reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    ESCRITURA       reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    LECTURA         reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    ID              reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    RETURN          reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    RCURLY          reduce using rule 12 (dec_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)


state 160

    (44) expresionB -> ASSIGN expresion .

    FOR             reduce using rule 44 (expresionB -> ASSIGN expresion .)
    WHILE           reduce using rule 44 (expresionB -> ASSIGN expresion .)
    IF              reduce using rule 44 (expresionB -> ASSIGN expresion .)
    ESCRITURA       reduce using rule 44 (expresionB -> ASSIGN expresion .)
    LECTURA         reduce using rule 44 (expresionB -> ASSIGN expresion .)
    VAR             reduce using rule 44 (expresionB -> ASSIGN expresion .)
    ID              reduce using rule 44 (expresionB -> ASSIGN expresion .)
    RETURN          reduce using rule 44 (expresionB -> ASSIGN expresion .)
    RCURLY          reduce using rule 44 (expresionB -> ASSIGN expresion .)
    COMMA           reduce using rule 44 (expresionB -> ASSIGN expresion .)
    RPAREN          reduce using rule 44 (expresionB -> ASSIGN expresion .)


state 161

    (47) peta_expB -> AND peta_exp .

    ASSIGN          reduce using rule 47 (peta_expB -> AND peta_exp .)
    FOR             reduce using rule 47 (peta_expB -> AND peta_exp .)
    WHILE           reduce using rule 47 (peta_expB -> AND peta_exp .)
    IF              reduce using rule 47 (peta_expB -> AND peta_exp .)
    ESCRITURA       reduce using rule 47 (peta_expB -> AND peta_exp .)
    LECTURA         reduce using rule 47 (peta_expB -> AND peta_exp .)
    VAR             reduce using rule 47 (peta_expB -> AND peta_exp .)
    ID              reduce using rule 47 (peta_expB -> AND peta_exp .)
    RETURN          reduce using rule 47 (peta_expB -> AND peta_exp .)
    RCURLY          reduce using rule 47 (peta_expB -> AND peta_exp .)
    COMMA           reduce using rule 47 (peta_expB -> AND peta_exp .)
    RPAREN          reduce using rule 47 (peta_expB -> AND peta_exp .)


state 162

    (48) peta_expB -> OR peta_exp .

    ASSIGN          reduce using rule 48 (peta_expB -> OR peta_exp .)
    FOR             reduce using rule 48 (peta_expB -> OR peta_exp .)
    WHILE           reduce using rule 48 (peta_expB -> OR peta_exp .)
    IF              reduce using rule 48 (peta_expB -> OR peta_exp .)
    ESCRITURA       reduce using rule 48 (peta_expB -> OR peta_exp .)
    LECTURA         reduce using rule 48 (peta_expB -> OR peta_exp .)
    VAR             reduce using rule 48 (peta_expB -> OR peta_exp .)
    ID              reduce using rule 48 (peta_expB -> OR peta_exp .)
    RETURN          reduce using rule 48 (peta_expB -> OR peta_exp .)
    RCURLY          reduce using rule 48 (peta_expB -> OR peta_exp .)
    COMMA           reduce using rule 48 (peta_expB -> OR peta_exp .)
    RPAREN          reduce using rule 48 (peta_expB -> OR peta_exp .)


state 163

    (51) tera_expB -> LT tera_exp .

    AND             reduce using rule 51 (tera_expB -> LT tera_exp .)
    OR              reduce using rule 51 (tera_expB -> LT tera_exp .)
    ASSIGN          reduce using rule 51 (tera_expB -> LT tera_exp .)
    FOR             reduce using rule 51 (tera_expB -> LT tera_exp .)
    WHILE           reduce using rule 51 (tera_expB -> LT tera_exp .)
    IF              reduce using rule 51 (tera_expB -> LT tera_exp .)
    ESCRITURA       reduce using rule 51 (tera_expB -> LT tera_exp .)
    LECTURA         reduce using rule 51 (tera_expB -> LT tera_exp .)
    VAR             reduce using rule 51 (tera_expB -> LT tera_exp .)
    ID              reduce using rule 51 (tera_expB -> LT tera_exp .)
    RETURN          reduce using rule 51 (tera_expB -> LT tera_exp .)
    RCURLY          reduce using rule 51 (tera_expB -> LT tera_exp .)
    COMMA           reduce using rule 51 (tera_expB -> LT tera_exp .)
    RPAREN          reduce using rule 51 (tera_expB -> LT tera_exp .)


state 164

    (52) tera_expB -> GT tera_exp .

    AND             reduce using rule 52 (tera_expB -> GT tera_exp .)
    OR              reduce using rule 52 (tera_expB -> GT tera_exp .)
    ASSIGN          reduce using rule 52 (tera_expB -> GT tera_exp .)
    FOR             reduce using rule 52 (tera_expB -> GT tera_exp .)
    WHILE           reduce using rule 52 (tera_expB -> GT tera_exp .)
    IF              reduce using rule 52 (tera_expB -> GT tera_exp .)
    ESCRITURA       reduce using rule 52 (tera_expB -> GT tera_exp .)
    LECTURA         reduce using rule 52 (tera_expB -> GT tera_exp .)
    VAR             reduce using rule 52 (tera_expB -> GT tera_exp .)
    ID              reduce using rule 52 (tera_expB -> GT tera_exp .)
    RETURN          reduce using rule 52 (tera_expB -> GT tera_exp .)
    RCURLY          reduce using rule 52 (tera_expB -> GT tera_exp .)
    COMMA           reduce using rule 52 (tera_expB -> GT tera_exp .)
    RPAREN          reduce using rule 52 (tera_expB -> GT tera_exp .)


state 165

    (53) tera_expB -> LTE tera_exp .

    AND             reduce using rule 53 (tera_expB -> LTE tera_exp .)
    OR              reduce using rule 53 (tera_expB -> LTE tera_exp .)
    ASSIGN          reduce using rule 53 (tera_expB -> LTE tera_exp .)
    FOR             reduce using rule 53 (tera_expB -> LTE tera_exp .)
    WHILE           reduce using rule 53 (tera_expB -> LTE tera_exp .)
    IF              reduce using rule 53 (tera_expB -> LTE tera_exp .)
    ESCRITURA       reduce using rule 53 (tera_expB -> LTE tera_exp .)
    LECTURA         reduce using rule 53 (tera_expB -> LTE tera_exp .)
    VAR             reduce using rule 53 (tera_expB -> LTE tera_exp .)
    ID              reduce using rule 53 (tera_expB -> LTE tera_exp .)
    RETURN          reduce using rule 53 (tera_expB -> LTE tera_exp .)
    RCURLY          reduce using rule 53 (tera_expB -> LTE tera_exp .)
    COMMA           reduce using rule 53 (tera_expB -> LTE tera_exp .)
    RPAREN          reduce using rule 53 (tera_expB -> LTE tera_exp .)


state 166

    (54) tera_expB -> GTE tera_exp .

    AND             reduce using rule 54 (tera_expB -> GTE tera_exp .)
    OR              reduce using rule 54 (tera_expB -> GTE tera_exp .)
    ASSIGN          reduce using rule 54 (tera_expB -> GTE tera_exp .)
    FOR             reduce using rule 54 (tera_expB -> GTE tera_exp .)
    WHILE           reduce using rule 54 (tera_expB -> GTE tera_exp .)
    IF              reduce using rule 54 (tera_expB -> GTE tera_exp .)
    ESCRITURA       reduce using rule 54 (tera_expB -> GTE tera_exp .)
    LECTURA         reduce using rule 54 (tera_expB -> GTE tera_exp .)
    VAR             reduce using rule 54 (tera_expB -> GTE tera_exp .)
    ID              reduce using rule 54 (tera_expB -> GTE tera_exp .)
    RETURN          reduce using rule 54 (tera_expB -> GTE tera_exp .)
    RCURLY          reduce using rule 54 (tera_expB -> GTE tera_exp .)
    COMMA           reduce using rule 54 (tera_expB -> GTE tera_exp .)
    RPAREN          reduce using rule 54 (tera_expB -> GTE tera_exp .)


state 167

    (55) tera_expB -> EQUAL tera_exp .

    AND             reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    OR              reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    ASSIGN          reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    FOR             reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    WHILE           reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    IF              reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    ESCRITURA       reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    LECTURA         reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    VAR             reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    ID              reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    RETURN          reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    RCURLY          reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    COMMA           reduce using rule 55 (tera_expB -> EQUAL tera_exp .)
    RPAREN          reduce using rule 55 (tera_expB -> EQUAL tera_exp .)


state 168

    (56) tera_expB -> NEQUAL tera_exp .

    AND             reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    OR              reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    ASSIGN          reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    FOR             reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    WHILE           reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    IF              reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    ESCRITURA       reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    LECTURA         reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    VAR             reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    ID              reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    RETURN          reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    RCURLY          reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    COMMA           reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)
    RPAREN          reduce using rule 56 (tera_expB -> NEQUAL tera_exp .)


state 169

    (59) mega_expB -> PLUS mega_exp .

    LT              reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    GT              reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    LTE             reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    GTE             reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    EQUAL           reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    NEQUAL          reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    AND             reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    OR              reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    ASSIGN          reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    FOR             reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    WHILE           reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    IF              reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    ESCRITURA       reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    LECTURA         reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    VAR             reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    ID              reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    RETURN          reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    RCURLY          reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    COMMA           reduce using rule 59 (mega_expB -> PLUS mega_exp .)
    RPAREN          reduce using rule 59 (mega_expB -> PLUS mega_exp .)


state 170

    (60) mega_expB -> MINUS mega_exp .

    LT              reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    GT              reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    LTE             reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    GTE             reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    EQUAL           reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    NEQUAL          reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    AND             reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    OR              reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    ASSIGN          reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    FOR             reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    WHILE           reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    IF              reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    ESCRITURA       reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    LECTURA         reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    VAR             reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    ID              reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    RETURN          reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    RCURLY          reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    COMMA           reduce using rule 60 (mega_expB -> MINUS mega_exp .)
    RPAREN          reduce using rule 60 (mega_expB -> MINUS mega_exp .)


state 171

    (63) kilo_expB -> TIMES kilo_exp .

    PLUS            reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    MINUS           reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    LT              reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    GT              reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    LTE             reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    GTE             reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    EQUAL           reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    NEQUAL          reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    AND             reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    OR              reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    ASSIGN          reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    FOR             reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    WHILE           reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    IF              reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    ESCRITURA       reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    LECTURA         reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    VAR             reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    ID              reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    RETURN          reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    RCURLY          reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    COMMA           reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)
    RPAREN          reduce using rule 63 (kilo_expB -> TIMES kilo_exp .)


state 172

    (64) kilo_expB -> DIVIDE kilo_exp .

    PLUS            reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    MINUS           reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    LT              reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    GT              reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    LTE             reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    GTE             reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    EQUAL           reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    NEQUAL          reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    AND             reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    OR              reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    ASSIGN          reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    FOR             reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    WHILE           reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    IF              reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    ESCRITURA       reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    LECTURA         reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    VAR             reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    ID              reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    RETURN          reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    RCURLY          reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    COMMA           reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)
    RPAREN          reduce using rule 64 (kilo_expB -> DIVIDE kilo_exp .)


state 173

    (66) factor -> LPAREN expresion RPAREN .

    TIMES           reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    DIVIDE          reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    PLUS            reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    MINUS           reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    LT              reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    GT              reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    LTE             reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    GTE             reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    EQUAL           reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    NEQUAL          reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    AND             reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    OR              reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    ASSIGN          reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    FOR             reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    WHILE           reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    IF              reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    ESCRITURA       reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    LECTURA         reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    VAR             reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    ID              reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    RETURN          reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    RCURLY          reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 66 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 66 (factor -> LPAREN expresion RPAREN .)


state 174

    (75) ciclo_para_cada -> FOR LPAREN ID IN ID . ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (76) ciclo_para_cadaB -> . CONFORME expresion
    (77) ciclo_para_cadaB -> . empty
    (93) empty -> .

    CONFORME        shift and go to state 183
    RPAREN          reduce using rule 93 (empty -> .)

    ciclo_para_cadaB               shift and go to state 182
    empty                          shift and go to state 184

state 175

    (73) llam_paramsB -> COMMA llam_params .

    RPAREN          reduce using rule 73 (llam_paramsB -> COMMA llam_params .)


state 176

    (41) llam_varsB -> LBRACE CTEENT RBRACE LBRACE . CTEENT RBRACE

    CTEENT          shift and go to state 185


state 177

    (78) ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY . bloque RCURLY
    (26) bloque -> . bloqueB bloqueBB
    (27) bloqueB -> . asignacion
    (28) bloqueB -> . ciclo_para_cada
    (29) bloqueB -> . ciclo_mientras
    (30) bloqueB -> . condicion
    (31) bloqueB -> . escribir
    (32) bloqueB -> . leer
    (33) bloqueB -> . dec_vars
    (34) bloqueB -> . llam_func
    (35) bloqueB -> . regresar
    (38) asignacion -> . llam_vars ASSIGN expresion
    (75) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (79) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (82) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (87) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (71) llam_func -> . ID LPAREN llam_params RPAREN
    (91) regresar -> . RETURN LPAREN expresion RPAREN
    (39) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 56
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ESCRITURA       shift and go to state 60
    LECTURA         shift and go to state 61
    VAR             shift and go to state 7
    ID              shift and go to state 57
    RETURN          shift and go to state 62

    bloque                         shift and go to state 186
    bloqueB                        shift and go to state 45
    asignacion                     shift and go to state 46
    ciclo_para_cada                shift and go to state 47
    ciclo_mientras                 shift and go to state 48
    condicion                      shift and go to state 49
    escribir                       shift and go to state 50
    leer                           shift and go to state 51
    dec_vars                       shift and go to state 52
    llam_func                      shift and go to state 53
    regresar                       shift and go to state 54
    llam_vars                      shift and go to state 55

state 178

    (79) condicion -> IF LPAREN expresion RPAREN LCURLY . bloque RCURLY condicionB
    (26) bloque -> . bloqueB bloqueBB
    (27) bloqueB -> . asignacion
    (28) bloqueB -> . ciclo_para_cada
    (29) bloqueB -> . ciclo_mientras
    (30) bloqueB -> . condicion
    (31) bloqueB -> . escribir
    (32) bloqueB -> . leer
    (33) bloqueB -> . dec_vars
    (34) bloqueB -> . llam_func
    (35) bloqueB -> . regresar
    (38) asignacion -> . llam_vars ASSIGN expresion
    (75) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (79) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (82) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (87) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (71) llam_func -> . ID LPAREN llam_params RPAREN
    (91) regresar -> . RETURN LPAREN expresion RPAREN
    (39) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 56
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ESCRITURA       shift and go to state 60
    LECTURA         shift and go to state 61
    VAR             shift and go to state 7
    ID              shift and go to state 57
    RETURN          shift and go to state 62

    bloque                         shift and go to state 187
    bloqueB                        shift and go to state 45
    asignacion                     shift and go to state 46
    ciclo_para_cada                shift and go to state 47
    ciclo_mientras                 shift and go to state 48
    condicion                      shift and go to state 49
    escribir                       shift and go to state 50
    leer                           shift and go to state 51
    dec_vars                       shift and go to state 52
    llam_func                      shift and go to state 53
    regresar                       shift and go to state 54
    llam_vars                      shift and go to state 55

state 179

    (85) escribirBB -> COMMA escribirB .

    RPAREN          reduce using rule 85 (escribirBB -> COMMA escribirB .)


state 180

    (89) leerII -> COMMA ID .

    RPAREN          reduce using rule 89 (leerII -> COMMA ID .)


state 181

    (20) dec_func -> FUNCION ID LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY .

    FUNCION         reduce using rule 20 (dec_func -> FUNCION ID LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY .)
    MAIN            reduce using rule 20 (dec_func -> FUNCION ID LPAREN dec_params RPAREN COLON tipo_func LCURLY bloque RCURLY .)


state 182

    (75) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB . RPAREN LCURLY bloque RCURLY

    RPAREN          shift and go to state 188


state 183

    (76) ciclo_para_cadaB -> CONFORME . expresion
    (43) expresion -> . peta_exp expresionB
    (46) peta_exp -> . tera_exp peta_expB
    (50) tera_exp -> . mega_exp tera_expB
    (58) mega_exp -> . kilo_exp mega_expB
    (62) kilo_exp -> . factor kilo_expB
    (66) factor -> . LPAREN expresion RPAREN
    (67) factor -> . llam_vars
    (68) factor -> . llam_func
    (69) factor -> . CTEENT
    (70) factor -> . CTEDECI
    (39) llam_vars -> . ID llam_varsB
    (71) llam_func -> . ID LPAREN llam_params RPAREN

    LPAREN          shift and go to state 96
    CTEENT          shift and go to state 98
    CTEDECI         shift and go to state 99
    ID              shift and go to state 100

    expresion                      shift and go to state 189
    peta_exp                       shift and go to state 91
    tera_exp                       shift and go to state 92
    mega_exp                       shift and go to state 93
    kilo_exp                       shift and go to state 94
    factor                         shift and go to state 95
    llam_vars                      shift and go to state 89
    llam_func                      shift and go to state 97

state 184

    (77) ciclo_para_cadaB -> empty .

    RPAREN          reduce using rule 77 (ciclo_para_cadaB -> empty .)


state 185

    (41) llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT . RBRACE

    RBRACE          shift and go to state 190


state 186

    (78) ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque . RCURLY

    RCURLY          shift and go to state 191


state 187

    (79) condicion -> IF LPAREN expresion RPAREN LCURLY bloque . RCURLY condicionB

    RCURLY          shift and go to state 192


state 188

    (75) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN . LCURLY bloque RCURLY

    LCURLY          shift and go to state 193


state 189

    (76) ciclo_para_cadaB -> CONFORME expresion .

    RPAREN          reduce using rule 76 (ciclo_para_cadaB -> CONFORME expresion .)


state 190

    (41) llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .

    ASSIGN          reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    TIMES           reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    DIVIDE          reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    PLUS            reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    MINUS           reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    LT              reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    GT              reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    LTE             reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    GTE             reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    EQUAL           reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    NEQUAL          reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    AND             reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    OR              reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    FOR             reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    WHILE           reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    IF              reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    ESCRITURA       reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    LECTURA         reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    VAR             reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    ID              reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    RETURN          reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    RCURLY          reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    COMMA           reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)
    RPAREN          reduce using rule 41 (llam_varsB -> LBRACE CTEENT RBRACE LBRACE CTEENT RBRACE .)


state 191

    (78) ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .

    FOR             reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    WHILE           reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    IF              reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    ESCRITURA       reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    LECTURA         reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    VAR             reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    ID              reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    RETURN          reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)
    RCURLY          reduce using rule 78 (ciclo_mientras -> WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY .)


state 192

    (79) condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY . condicionB
    (80) condicionB -> . ELSE LCURLY bloque RCURLY
    (81) condicionB -> . empty
    (93) empty -> .

    ELSE            shift and go to state 195
    FOR             reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    ESCRITURA       reduce using rule 93 (empty -> .)
    LECTURA         reduce using rule 93 (empty -> .)
    VAR             reduce using rule 93 (empty -> .)
    ID              reduce using rule 93 (empty -> .)
    RETURN          reduce using rule 93 (empty -> .)
    RCURLY          reduce using rule 93 (empty -> .)

    condicionB                     shift and go to state 194
    empty                          shift and go to state 196

state 193

    (75) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY . bloque RCURLY
    (26) bloque -> . bloqueB bloqueBB
    (27) bloqueB -> . asignacion
    (28) bloqueB -> . ciclo_para_cada
    (29) bloqueB -> . ciclo_mientras
    (30) bloqueB -> . condicion
    (31) bloqueB -> . escribir
    (32) bloqueB -> . leer
    (33) bloqueB -> . dec_vars
    (34) bloqueB -> . llam_func
    (35) bloqueB -> . regresar
    (38) asignacion -> . llam_vars ASSIGN expresion
    (75) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (79) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (82) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (87) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (71) llam_func -> . ID LPAREN llam_params RPAREN
    (91) regresar -> . RETURN LPAREN expresion RPAREN
    (39) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 56
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ESCRITURA       shift and go to state 60
    LECTURA         shift and go to state 61
    VAR             shift and go to state 7
    ID              shift and go to state 57
    RETURN          shift and go to state 62

    bloque                         shift and go to state 197
    bloqueB                        shift and go to state 45
    asignacion                     shift and go to state 46
    ciclo_para_cada                shift and go to state 47
    ciclo_mientras                 shift and go to state 48
    condicion                      shift and go to state 49
    escribir                       shift and go to state 50
    leer                           shift and go to state 51
    dec_vars                       shift and go to state 52
    llam_func                      shift and go to state 53
    regresar                       shift and go to state 54
    llam_vars                      shift and go to state 55

state 194

    (79) condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .

    FOR             reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    WHILE           reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    IF              reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    ESCRITURA       reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    LECTURA         reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    VAR             reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    ID              reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    RETURN          reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)
    RCURLY          reduce using rule 79 (condicion -> IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB .)


state 195

    (80) condicionB -> ELSE . LCURLY bloque RCURLY

    LCURLY          shift and go to state 198


state 196

    (81) condicionB -> empty .

    FOR             reduce using rule 81 (condicionB -> empty .)
    WHILE           reduce using rule 81 (condicionB -> empty .)
    IF              reduce using rule 81 (condicionB -> empty .)
    ESCRITURA       reduce using rule 81 (condicionB -> empty .)
    LECTURA         reduce using rule 81 (condicionB -> empty .)
    VAR             reduce using rule 81 (condicionB -> empty .)
    ID              reduce using rule 81 (condicionB -> empty .)
    RETURN          reduce using rule 81 (condicionB -> empty .)
    RCURLY          reduce using rule 81 (condicionB -> empty .)


state 197

    (75) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque . RCURLY

    RCURLY          shift and go to state 199


state 198

    (80) condicionB -> ELSE LCURLY . bloque RCURLY
    (26) bloque -> . bloqueB bloqueBB
    (27) bloqueB -> . asignacion
    (28) bloqueB -> . ciclo_para_cada
    (29) bloqueB -> . ciclo_mientras
    (30) bloqueB -> . condicion
    (31) bloqueB -> . escribir
    (32) bloqueB -> . leer
    (33) bloqueB -> . dec_vars
    (34) bloqueB -> . llam_func
    (35) bloqueB -> . regresar
    (38) asignacion -> . llam_vars ASSIGN expresion
    (75) ciclo_para_cada -> . FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY
    (78) ciclo_mientras -> . WHILE LPAREN expresion RPAREN LCURLY bloque RCURLY
    (79) condicion -> . IF LPAREN expresion RPAREN LCURLY bloque RCURLY condicionB
    (82) escribir -> . ESCRITURA LPAREN escribirB RPAREN
    (87) leer -> . LECTURA LPAREN leerI RPAREN
    (7) dec_vars -> . VAR dec_varsI COLON tipo dec_varsB dec_varsBB
    (71) llam_func -> . ID LPAREN llam_params RPAREN
    (91) regresar -> . RETURN LPAREN expresion RPAREN
    (39) llam_vars -> . ID llam_varsB

    FOR             shift and go to state 56
    WHILE           shift and go to state 58
    IF              shift and go to state 59
    ESCRITURA       shift and go to state 60
    LECTURA         shift and go to state 61
    VAR             shift and go to state 7
    ID              shift and go to state 57
    RETURN          shift and go to state 62

    bloque                         shift and go to state 200
    bloqueB                        shift and go to state 45
    asignacion                     shift and go to state 46
    ciclo_para_cada                shift and go to state 47
    ciclo_mientras                 shift and go to state 48
    condicion                      shift and go to state 49
    escribir                       shift and go to state 50
    leer                           shift and go to state 51
    dec_vars                       shift and go to state 52
    llam_func                      shift and go to state 53
    regresar                       shift and go to state 54
    llam_vars                      shift and go to state 55

state 199

    (75) ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .

    FOR             reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    WHILE           reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    IF              reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    ESCRITURA       reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    LECTURA         reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    VAR             reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    ID              reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    RETURN          reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)
    RCURLY          reduce using rule 75 (ciclo_para_cada -> FOR LPAREN ID IN ID ciclo_para_cadaB RPAREN LCURLY bloque RCURLY .)


state 200

    (80) condicionB -> ELSE LCURLY bloque . RCURLY

    RCURLY          shift and go to state 201


state 201

    (80) condicionB -> ELSE LCURLY bloque RCURLY .

    FOR             reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)
    WHILE           reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)
    IF              reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)
    ESCRITURA       reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)
    LECTURA         reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)
    VAR             reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)
    ID              reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)
    RETURN          reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)
    RCURLY          reduce using rule 80 (condicionB -> ELSE LCURLY bloque RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 34 resolved as shift
